<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>BracesOnIfStatements:AimDebugRecorder.kt$AimDebugRecorder$else</ID>
    <ID>BracesOnIfStatements:AutoFarmAutoWalk.kt$AutoFarmAutoWalk$if</ID>
    <ID>BracesOnIfStatements:AutoFarmBlockHandler.kt$AutoFarmBlockTracker$if</ID>
    <ID>BracesOnIfStatements:CommandItemEnchant.kt$CommandItemEnchant$else</ID>
    <ID>BracesOnIfStatements:CommandItemEnchant.kt$CommandItemEnchant$if</ID>
    <ID>BracesOnIfStatements:DebugCPSRecorder.kt$DebugCPSRecorder$if</ID>
    <ID>BracesOnIfStatements:FaceTargetPositionFactory.kt$NearestRotationTargetPositionFactory$if</ID>
    <ID>BracesOnIfStatements:FaceTargetPositionFactory.kt$ReverseYawTargetPositionFactory$if</ID>
    <ID>BracesOnIfStatements:FaceTargetPositionFactory.kt$StabilizedRotationTargetPositionFactory$if</ID>
    <ID>BracesOnIfStatements:FakeLag.kt$FakeLag$if</ID>
    <ID>BracesOnIfStatements:FallingPlayer.kt$FallingPlayer$if</ID>
    <ID>BracesOnIfStatements:FlyFireball.kt$FlyFireball$else</ID>
    <ID>BracesOnIfStatements:FlyFireballCustomTechnique.kt$FlyFireballCustomTechnique$if</ID>
    <ID>BracesOnIfStatements:FlyFireballLegitTechnique.kt$FlyFireballLegitTechnique$if</ID>
    <ID>BracesOnIfStatements:FlyGrim2859V.kt$FlyGrim2859V$if</ID>
    <ID>BracesOnIfStatements:FontRenderer.kt$FontRenderer.Companion$else</ID>
    <ID>BracesOnIfStatements:ItemImageAtlas.kt$ItemImageAtlas$if</ID>
    <ID>BracesOnIfStatements:Module.kt$Module$else</ID>
    <ID>BracesOnIfStatements:Module.kt$Module$if</ID>
    <ID>BracesOnIfStatements:ModuleAntiExploit.kt$ModuleAntiExploit$if</ID>
    <ID>BracesOnIfStatements:ModuleAutoBow.kt$ModuleAutoBow$else</ID>
    <ID>BracesOnIfStatements:ModuleAutoBow.kt$ModuleAutoBow$if</ID>
    <ID>BracesOnIfStatements:ModuleAutoFarm.kt$ModuleAutoFarm$if</ID>
    <ID>BracesOnIfStatements:ModuleBacktrack.kt$ModuleBacktrack$if</ID>
    <ID>BracesOnIfStatements:ModuleBedPlates.kt$ModuleBedPlates.BlockTracker$else</ID>
    <ID>BracesOnIfStatements:ModuleBlink.kt$ModuleBlink$if</ID>
    <ID>BracesOnIfStatements:ModuleBlockESP.kt$ModuleBlockESP.Glow$if</ID>
    <ID>BracesOnIfStatements:ModuleBlockESP.kt$ModuleBlockESP.Outline$if</ID>
    <ID>BracesOnIfStatements:ModuleCapeTransfer.kt$ModuleCapeTransfer$if</ID>
    <ID>BracesOnIfStatements:ModuleClickTp.kt$ModuleClickTp$else</ID>
    <ID>BracesOnIfStatements:ModuleClickTp.kt$ModuleClickTp$if</ID>
    <ID>BracesOnIfStatements:ModuleCriticals.kt$ModuleCriticals$if</ID>
    <ID>BracesOnIfStatements:ModuleHighJump.kt$ModuleHighJump.Vulcan$else</ID>
    <ID>BracesOnIfStatements:ModuleHoleESP.kt$ModuleHoleESP$if</ID>
    <ID>BracesOnIfStatements:ModuleNoSlow.kt$ModuleNoSlow$else</ID>
    <ID>BracesOnIfStatements:ModuleNoSlow.kt$ModuleNoSlow$if</ID>
    <ID>BracesOnIfStatements:ModulePlugins.kt$ModulePlugins$else</ID>
    <ID>BracesOnIfStatements:ModulePlugins.kt$ModulePlugins$if</ID>
    <ID>BracesOnIfStatements:ModuleRotations.kt$ModuleRotations$if</ID>
    <ID>BracesOnIfStatements:ModuleSkinDerp.kt$ModuleSkinDerp$else</ID>
    <ID>BracesOnIfStatements:ModuleSkinDerp.kt$ModuleSkinDerp$if</ID>
    <ID>BracesOnIfStatements:ModuleSmartEat.kt$ModuleSmartEat.Estimator$else</ID>
    <ID>BracesOnIfStatements:ModuleSmartEat.kt$ModuleSmartEat.Estimator$if</ID>
    <ID>BracesOnIfStatements:ModuleSmartEat.kt$ModuleSmartEat.SilentOffhand$if</ID>
    <ID>BracesOnIfStatements:ModuleStorageESP.kt$ModuleStorageESP.Glow$if</ID>
    <ID>BracesOnIfStatements:ModuleTimerRange.kt$ModuleTimerRange$if</ID>
    <ID>BracesOnIfStatements:ProxyManager.kt$ProxyManager.ProxyCredentials.Companion$else</ID>
    <ID>BracesOnIfStatements:ProxyManager.kt$ProxyManager.ProxyCredentials.Companion$if</ID>
    <ID>BracesOnIfStatements:RenderBufferBuilder.kt$RenderBufferBuilder$else</ID>
    <ID>BracesOnIfStatements:RenderBufferBuilder.kt$RenderBufferBuilder$if</ID>
    <ID>BracesOnIfStatements:RenderShortcuts.kt$else</ID>
    <ID>BracesOnIfStatements:RenderShortcuts.kt$if</ID>
    <ID>BracesOnIfStatements:RequestContext.kt$else</ID>
    <ID>BracesOnIfStatements:RequestContext.kt$if</ID>
    <ID>BracesOnIfStatements:SpeedGeneric.kt$SpeedBHopBase$if</ID>
    <ID>BracesOnIfStatements:SpeedGrimCollide.kt$SpeedGrimCollide$if</ID>
    <ID>BracesOnIfStatements:SpeedHypixelBHop.kt$SpeedHypixelBHop$if</ID>
    <ID>BracesOnIfStatements:SpeedPreventDeadlyJump.kt$SpeedPreventDeadlyJump$if</ID>
    <ID>BracesOnIfStatements:TargetFinding.kt$BlockPlacementTarget$if</ID>
    <ID>BracesOnIfStatements:TargetFinding.kt$if</ID>
    <ID>BracesOnIfStatements:TargetRenderer.kt$WorldTargetRenderer.GlowingCircle$else</ID>
    <ID>BracesOnIfStatements:TargetRenderer.kt$WorldTargetRenderer.GlowingCircle$if</ID>
    <ID>CognitiveComplexMethod:AutoConfig.kt$AutoConfig$fun handlePossibleAutoConfig(jsonObject: JsonObject)</ID>
    <ID>CognitiveComplexMethod:CombatExtensions.kt$EnemyConfigurable$fun isTargeted(suspect: Entity, attackable: Boolean = false): Boolean</ID>
    <ID>CognitiveComplexMethod:CombatExtensions.kt$fun Entity.attack(swing: Boolean, keepSprint: Boolean = false)</ID>
    <ID>CognitiveComplexMethod:Command.kt$Command$fun autoComplete( builder: SuggestionsBuilder, tokenizationResult: Pair&lt;List&lt;String>, List&lt;Int>>, commandIdx: Int, isNewParameter: Boolean )</ID>
    <ID>CognitiveComplexMethod:CommandManager.kt$CommandManager$@ScriptApi @JvmName("execute") fun execute(cmd: String)</ID>
    <ID>CognitiveComplexMethod:CommandManager.kt$CommandManager$fun autoComplete(origCmd: String, start: Int): CompletableFuture&lt;Suggestions></ID>
    <ID>CognitiveComplexMethod:CommandManager.kt$CommandManager$fun tokenizeCommand(line: String): Pair&lt;List&lt;String>, List&lt;Int>></ID>
    <ID>CognitiveComplexMethod:CommandScript.kt$CommandScript$fun createCommand(): Command</ID>
    <ID>CognitiveComplexMethod:ContainerRest.kt$fun RestNode.containerRest()</ID>
    <ID>CognitiveComplexMethod:FailSwing.kt$FailSwing$suspend fun Sequence&lt;*>.dealWithFakeSwing(target: Entity?)</ID>
    <ID>CognitiveComplexMethod:FallingPlayer.kt$FallingPlayer$fun findCollision(ticks: Int): CollisionResult?</ID>
    <ID>CognitiveComplexMethod:FontRenderer.kt$FontRenderer$override fun getStringWidth( text: String, shadow: Boolean ): Float</ID>
    <ID>CognitiveComplexMethod:FontRenderer.kt$FontRenderer$private fun drawInternal( text: String, x0: Float, y0: Float, defaultColor: Color4b, shadow: Boolean, obfuscatedSeed: Long, z: Float, scale: Float ): Float</ID>
    <ID>CognitiveComplexMethod:IpInfoApi.kt$IpInfoApi$private fun makeAsyncEndpointRequest(proxy: ProxyManager.Proxy?, endpoint: String, success: (String) -> Unit, failure: (Throwable) -> Unit)</ID>
    <ID>CognitiveComplexMethod:ItemCategorization.kt$ItemCategorization$@Suppress("CyclomaticComplexMethod", "LongMethod") fun getItemFacets(slot: ItemSlot): Array&lt;ItemFacet></ID>
    <ID>CognitiveComplexMethod:ModuleBedPlates.kt$ModuleBedPlates$private fun BlockPos.getBedPlatesAround(): Map&lt;Block, Int></ID>
    <ID>CognitiveComplexMethod:ModuleHoleESP.kt$ModuleHoleESP$private fun updateRegion(region: Region)</ID>
    <ID>CognitiveComplexMethod:ModuleKillAura.kt$ModuleKillAura$internal suspend fun Sequence&lt;*>.prepareAttackEnvironment(rotation: Rotation? = null, attack: () -> Unit)</ID>
    <ID>CognitiveComplexMethod:ModuleKillAura.kt$ModuleKillAura$private suspend fun Sequence&lt;*>.mightAttack(chosenEntity: Entity, rotation: Rotation)</ID>
    <ID>CognitiveComplexMethod:ProxyRest.kt$internal fun RestNode.proxyRest()</ID>
    <ID>CognitiveComplexMethod:RegistryRest.kt$fun RestNode.registriesRest()</ID>
    <ID>CognitiveComplexMethod:SimulatedArrow.kt$SimulatedArrow$private fun updateCollision(pos: Vec3d, newPos: Vec3d): HitResult?</ID>
    <ID>CognitiveComplexMethod:SpeedAntiCornerBump.kt$SpeedAntiCornerBump$fun getSuggestedJumpDelay( simulatedPlayer: SimulatedPlayer, n: Int = 2, ): Int?</ID>
    <ID>CognitiveComplexMethod:TextureRest.kt$fun RestNode.resourceRest()</ID>
    <ID>ComplexCondition:FakeLag.kt$FakeLag$ModuleBlink.enabled || ModuleAntiVoid.needsArtificialLag || ModuleFakeLag.shouldLag(packet) || NoFallBlink.shouldLag() || ModuleInventoryMove.Blink.shouldLag() || ModuleClickTp.requiresLag || FlyNcpClip.shouldLag || ScaffoldBlinkFeature.shouldBlink</ID>
    <ID>ComplexCondition:SimulatedArrow.kt$SimulatedArrow$!it.isSpectator &amp;&amp; it.isAlive &amp;&amp; (it.canHit() || arrowEntity != mc.player &amp;&amp; it == arrowEntity)</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:ModuleAimbot.kt$ModuleAimbot$val (fromPoint, toPoint, box, cutOffBox) = pointTracker.gatherPoint(target, PointTracker.AimSituation.FOR_NOW)</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:ModuleAutoShoot.kt$ModuleAutoShoot$val (fromPoint, toPoint, _, _) = pointTracker.gatherPoint(target, PointTracker.AimSituation.FOR_NEXT_TICK)</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:ModuleKillAura.kt$ModuleKillAura$val (eyes, nextPoint, box, cutOffBox) = pointTracker.gatherPoint( entity, situation )</ID>
    <ID>EmptyCatchBlock:ModuleMobOwners.kt$ModuleMobOwners${ }</ID>
    <ID>EmptyFunctionBlock:ModuleStorageESP.kt$ModuleStorageESP.StorageScanner${}</ID>
    <ID>FunctionOnlyReturningConstant:SimulatedArrow.kt$SimulatedArrow$private fun isTouchingWater(): Boolean</ID>
    <ID>LongMethod:AccountsRest.kt$fun RestNode.accountsRest()</ID>
    <ID>LongMethod:AutoConfig.kt$AutoConfig$fun handlePossibleAutoConfig(jsonObject: JsonObject)</ID>
    <ID>LongMethod:ChatClient.kt$ChatClient$private fun handleFunctionalPacket(packet: Packet)</ID>
    <ID>LongMethod:CommandAutoDisable.kt$CommandAutoDisable$fun createCommand(): Command</ID>
    <ID>LongMethod:CommandBinds.kt$CommandBinds$fun createCommand(): Command</ID>
    <ID>LongMethod:CommandClient.kt$CommandClient$private fun componentCommand()</ID>
    <ID>LongMethod:CommandClient.kt$CommandClient$private fun integrationCommand()</ID>
    <ID>LongMethod:CommandConfig.kt$CommandConfig$fun createCommand(): Command</ID>
    <ID>LongMethod:CommandContainers.kt$CommandContainers$fun createCommand(): Command</ID>
    <ID>LongMethod:CommandHide.kt$CommandHide$fun createCommand(): Command</ID>
    <ID>LongMethod:CommandItems.kt$CommandItems$fun createCommand(): Command</ID>
    <ID>LongMethod:CommandLocalConfig.kt$CommandLocalConfig$fun createCommand(): Command</ID>
    <ID>LongMethod:CommandManager.kt$CommandManager$@ScriptApi @JvmName("execute") fun execute(cmd: String)</ID>
    <ID>LongMethod:CommandScript.kt$CommandScript$fun createCommand(): Command</ID>
    <ID>LongMethod:CommandXRay.kt$CommandXRay$fun createCommand(): Command</ID>
    <ID>LongMethod:ContainerRest.kt$fun RestNode.containerRest()</ID>
    <ID>LongMethod:FontRenderer.kt$FontRenderer$private fun drawInternal( text: String, x0: Float, y0: Float, defaultColor: Color4b, shadow: Boolean, obfuscatedSeed: Long, z: Float, scale: Float ): Float</ID>
    <ID>LongMethod:ModuleManager.kt$ModuleManager$fun registerInbuilt()</ID>
    <ID>LongMethod:ProxyRest.kt$internal fun RestNode.proxyRest()</ID>
    <ID>LongMethod:RegistryRest.kt$fun RestNode.registriesRest()</ID>
    <ID>LongMethod:ServerListRest.kt$ServerListRest$internal fun RestNode.serverListRest()</ID>
    <ID>LongMethod:Value.kt$Value$open fun setByString(string: String)</ID>
    <ID>LongMethod:WorldListRest.kt$internal fun RestNode.worldListRest()</ID>
    <ID>LongParameterList:AimPlan.kt$AimPlan$( val rotation: Rotation, val vec3d: Vec3d? = null, val entity: Entity? = null, val angleSmooth: AngleSmoothMode, val ticksUntilReset: Int, /** * The reset threshold defines the threshold at which we are going to reset the aim plan. * The threshold is being calculated by the distance between the current rotation and the rotation we want to aim. */ val resetThreshold: Float, /** * Consider if the inventory is open or not. If the inventory is open, we might not want to continue updating. */ val considerInventory: Boolean, val applyVelocityFix: Boolean, val changeLook: Boolean )</ID>
    <ID>LongParameterList:Command.kt$Command$( val name: String, val aliases: Array&lt;out String>, val parameters: Array&lt;Parameter&lt;*>>, val subcommands: Array&lt;Command>, val executable: Boolean, val handler: CommandHandler?, private var parentCommand: Command? = null )</ID>
    <ID>LongParameterList:FallingPlayer.kt$FallingPlayer$( private val player: ClientPlayerEntity, var x: Double, var y: Double, var z: Double, private var motionX: Double, private var motionY: Double, private var motionZ: Double, private val yaw: Float )</ID>
    <ID>LongParameterList:FontRenderer.kt$FontRenderer$( text: String, x0: Float, y0: Float, defaultColor: Color4b, shadow: Boolean, obfuscatedSeed: Long, z: Float, scale: Float )</ID>
    <ID>LongParameterList:FontRenderer.kt$FontRenderer$( x0: Float, x: Float, y: Float, z: Float, color: Color4b, through: Boolean )</ID>
    <ID>LongParameterList:JsNetworkUtil.kt$JsNetworkUtil$(x: Double, y: Double, z: Double, yaw: Float, pitch: Float, onGround: Boolean)</ID>
    <ID>LongParameterList:Mat4.kt$Mat4.Companion$( left: Float, top: Float, right: Float, bottom: Float, nearPlane: Float, farPlane: Float )</ID>
    <ID>LongParameterList:Parameter.kt$Parameter$( val name: String, val required: Boolean, val vararg: Boolean, val verifier: ParameterVerifier&lt;T>?, val autocompletionHandler: AutoCompletionHandler?, val useMinecraftAutoCompletion: Boolean, var command: Command? = null )</ID>
    <ID>LongParameterList:Region.kt$Region$(minX: Int, minY: Int, minZ: Int, maxX: Int, maxY: Int, maxZ: Int)</ID>
    <ID>LongParameterList:RotationsUtil.kt$RotationManager$( vecRotation: VecRotation, entity: Entity? = null, considerInventory: Boolean = true, configurable: RotationsConfigurable, priority: Priority, provider: Module )</ID>
    <ID>LongParameterList:ThemeManager.kt$ThemeManager$(context: DrawContext, width: Int, height: Int, mouseX: Int, mouseY: Int, delta: Float)</ID>
    <ID>LoopWithTooManyJumpStatements:ModuleIgnite.kt$ModuleIgnite$for</ID>
    <ID>LoopWithTooManyJumpStatements:ModuleKillAura.kt$ModuleKillAura$for</ID>
    <ID>LoopWithTooManyJumpStatements:ModuleProjectilePuncher.kt$ModuleProjectilePuncher$for</ID>
    <ID>LoopWithTooManyJumpStatements:TargetFinding.kt$for</ID>
    <ID>MatchingDeclarationName:ComparatorUtils.kt$ComparatorChain&lt;T> : Comparator</ID>
    <ID>MatchingDeclarationName:MovementUtils.kt$DirectionalInput</ID>
    <ID>MaxLineLength:HttpClient.kt$HttpClient$"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36"</ID>
    <ID>MaxLineLength:HttpConductor.kt$HttpConductor$httpHeaders[HttpHeaderNames.ACCESS_CONTROL_ALLOW_HEADERS] = "Content-Type, Content-Length, Authorization, Accept, X-Requested-With"</ID>
    <ID>MaxLineLength:HttpResponseUtil.kt$httpHeaders[HttpHeaderNames.ACCESS_CONTROL_ALLOW_HEADERS] = "Content-Type, Content-Length, Authorization, Accept, X-Requested-With"</ID>
    <ID>MaxLineLength:ModuleNameProtect.kt$ModuleNameProtect.NameProtectOrderedText$if</ID>
    <ID>MaxLineLength:ModuleTracers.kt$ModuleTracers$(if (DistanceColor.useViewDistance) mc.options.viewDistance.value.toFloat() else DistanceColor.customViewDistance) * 16</ID>
    <ID>MaxLineLength:NettyServer.kt$NettyServer$.</ID>
    <ID>MemberNameEqualsClassName:ServerListRest.kt$ServerListRest$internal fun RestNode.serverListRest()</ID>
    <ID>NestedBlockDepth:ChunkScanner.kt$ChunkScanner.ChunkScannerThread$private fun scanChunk(request: UpdateRequest.ChunkUpdateRequest)</ID>
    <ID>NestedBlockDepth:CombatExtensions.kt$EnemyConfigurable$fun isTargeted(suspect: Entity, attackable: Boolean = false): Boolean</ID>
    <ID>NestedBlockDepth:CombatExtensions.kt$fun Entity.attack(swing: Boolean, keepSprint: Boolean = false)</ID>
    <ID>NestedBlockDepth:CommandManager.kt$CommandManager$fun autoComplete(origCmd: String, start: Int): CompletableFuture&lt;Suggestions></ID>
    <ID>NestedBlockDepth:EntityExtensions.kt$fun LivingEntity.getActualHealth(fromScoreboard: Boolean = true): Float</ID>
    <ID>NestedBlockDepth:FontRenderer.kt$FontRenderer$private fun drawInternal( text: String, x0: Float, y0: Float, defaultColor: Color4b, shadow: Boolean, obfuscatedSeed: Long, z: Float, scale: Float ): Float</ID>
    <ID>NestedBlockDepth:RotationsUtil.kt$RotationManager$fun update()</ID>
    <ID>PrintStackTrace:CommandManager.kt$CommandManager$e</ID>
    <ID>ReturnCount:AutoFarmBlockHandler.kt$AutoFarmBlockTracker$override fun getStateFor(pos: BlockPos, state: BlockState): AutoFarmTrackedStates?</ID>
    <ID>ReturnCount:CombatExtensions.kt$EnemyConfigurable$fun isTargeted(suspect: Entity, attackable: Boolean = false): Boolean</ID>
    <ID>ReturnCount:FallingPlayer.kt$FallingPlayer$fun findCollision(ticks: Int): CollisionResult?</ID>
    <ID>ReturnCount:IntegrationHandler.kt$IntegrationHandler$private fun handleScreenSituation(screen: Screen?): Boolean</ID>
    <ID>ReturnCount:SpeedAntiCornerBump.kt$SpeedAntiCornerBump$fun getSuggestedJumpDelay( simulatedPlayer: SimulatedPlayer, n: Int = 2, ): Int?</ID>
    <ID>SpreadOperator:JsReflectionUtil.kt$JsReflectionUtil$( Remapper.remapField(clazz, name, true), *args.map { it!!::class.java }.toTypedArray() )</ID>
    <ID>SpreadOperator:JsReflectionUtil.kt$JsReflectionUtil$( Remapper.remapField(obj::class.java, name, true), *args.map { it!!::class.java }.toTypedArray() )</ID>
    <ID>SpreadOperator:JsReflectionUtil.kt$JsReflectionUtil$(*args.map { it!!::class.java }.toTypedArray())</ID>
    <ID>SpreadOperator:ModuleScaffold.kt$ModuleScaffold$(blockInMainHand, blockInOffHand, *blocksInHotbar.map { it.second }.toTypedArray())</ID>
    <ID>StringLiteralDuplication:AutoQueueGommeDuels.kt$AutoQueueGommeDuels$"AutoPlay"</ID>
    <ID>StringLiteralDuplication:JsSetting.kt$JsSetting$"default"</ID>
    <ID>SwallowedException:CommandValue.kt$CommandValue$e: Exception</ID>
    <ID>SwallowedException:ModuleMobOwners.kt$ModuleMobOwners$e: Exception</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:Value.kt$Value$IllegalArgumentException()</ID>
    <ID>ThrowsCount:CommandAutoDisable.kt$CommandAutoDisable$fun createCommand(): Command</ID>
    <ID>ThrowsCount:CommandBinds.kt$CommandBinds$fun createCommand(): Command</ID>
    <ID>ThrowsCount:CommandContainers.kt$CommandContainers$fun createCommand(): Command</ID>
    <ID>ThrowsCount:CommandHide.kt$CommandHide$fun createCommand(): Command</ID>
    <ID>ThrowsCount:CommandItems.kt$CommandItems$fun createCommand(): Command</ID>
    <ID>ThrowsCount:CommandManager.kt$CommandManager$@ScriptApi @JvmName("execute") fun execute(cmd: String)</ID>
    <ID>ThrowsCount:CommandXRay.kt$CommandXRay$fun createCommand(): Command</ID>
    <ID>TooManyFunctions:AccountManager.kt$AccountManager : ConfigurableListenable</ID>
    <ID>TooManyFunctions:BlockExtensions.kt$net.ccbluex.liquidbounce.utils.block.BlockExtensions.kt</ID>
    <ID>TooManyFunctions:ChatClient.kt$ChatClient</ID>
    <ID>TooManyFunctions:ClientUtils.kt$net.ccbluex.liquidbounce.utils.client.ClientUtils.kt</ID>
    <ID>TooManyFunctions:CombatManager.kt$CombatManager : Listenable</ID>
    <ID>TooManyFunctions:CommandManager.kt$CommandManager : Iterable</ID>
    <ID>TooManyFunctions:ConfigSystem.kt$ConfigSystem</ID>
    <ID>TooManyFunctions:Configurable.kt$Configurable : Value</ID>
    <ID>TooManyFunctions:EntityExtensions.kt$net.ccbluex.liquidbounce.utils.entity.EntityExtensions.kt</ID>
    <ID>TooManyFunctions:FakeLag.kt$FakeLag : Listenable</ID>
    <ID>TooManyFunctions:InventoryUtils.kt$net.ccbluex.liquidbounce.utils.inventory.InventoryUtils.kt</ID>
    <ID>TooManyFunctions:ItemExtensions.kt$net.ccbluex.liquidbounce.utils.item.ItemExtensions.kt</ID>
    <ID>TooManyFunctions:JsSetting.kt$JsSetting</ID>
    <ID>TooManyFunctions:ModuleManager.kt$ModuleManager : ListenableIterable</ID>
    <ID>TooManyFunctions:RenderTasks.kt$Color4b</ID>
    <ID>TooManyFunctions:RotationsUtil.kt$RotationManager : Listenable</ID>
    <ID>TooManyFunctions:TextExtensions.kt$net.ccbluex.liquidbounce.utils.client.TextExtensions.kt</ID>
    <ID>UnusedParameter:ClientApi.kt$ClientApi$settings: String</ID>
    <ID>UnusedParameter:CommandConfig.kt$CommandConfig$validator: (Module) -> Boolean = { true }</ID>
    <ID>UnusedParameter:CommandLocalConfig.kt$CommandLocalConfig$validator: (Module) -> Boolean = { true }</ID>
    <ID>UnusedParameter:FaceTargetPositionFactory.kt$StabilizedRotationTargetPositionFactory$face: Face</ID>
    <ID>UnusedParameter:ModuleManager.kt$ModuleManager$args: List&lt;String></ID>
    <ID>UnusedPrivateMember:ModuleHoleESP.kt$ModuleHoleESP$private fun flatten(pos: BlockPos): BlockPos</ID>
    <ID>UnusedPrivateProperty:NoFallBlink.kt$NoFallBlink$i</ID>
  </CurrentIssues>
</SmellBaseline>
