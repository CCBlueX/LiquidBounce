/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2016 - 2020 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id "fabric-loom"
    id "org.jetbrains.kotlin.jvm"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "org.jlleitschuh.gradle.ktlint" version "10.0.0"
}

import net.fabricmc.loom.task.RemapJarTask

ktlint {
    enableExperimentalRules = true
    ignoreFailures = true
    disabledRules = ["no-wildcard-imports", "no-blank-line-before-rbrace"]

    reporters {
        reporter "plain"
        reporter "checkstyle"
    }

}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
    accessWidener "src/main/resources/liquidbounce.accesswidener"
}

repositories {
    mavenCentral()
    maven { url = "http://maven.fabricmc.net/" }
    maven { url = "https://jitpack.io" }
    maven { url = "https://dl.bintray.com/earthcomputer/mods" }
}

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    // Libraries (required mods)

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    // MultiConnect API
    modImplementation "net.earthcomputer:multiconnect:${project.multiconnect_version}:api"
    include "net.earthcomputer:multiconnect:${project.multiconnect_version}:api"

    // Recommended mods (on IDE)
    modRuntime "net.earthcomputer:multiconnect:${project.multiconnect_version}:slim"
    modRuntime "io.github.prospector:modmenu:${project.mod_menu_version}"
    modRuntime "com.github.jellysquid3:sodium-fabric:${project.sodium_version}"
    modRuntime "com.github.jellysquid3:lithium-fabric:${project.lithium_version}"
    modRuntime "com.github.jellysquid3:phosphor-fabric:${project.phosphor_version}"

    // Ignore in export
    implementation "com.google.code.findbugs:jsr305:3.0.2" // to fix nullable imports

    // Client libraries

    implementation ('com.thealtening.api:api:4.1.0') {
        exclude group: 'com.google.code.gson', module: 'gson'
    }

    implementation "com.labymedia:ultralight-java-base:0.4.3"
    implementation "com.labymedia:ultralight-java-databind:0.4.3"

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(":theme")

    // Test libraries

    testImplementation "org.junit.jupiter:junit-jupiter:5.7.0"
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Test) {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.suppressWarnings = true
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.useIR = true
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

shadowJar {
    archiveClassifier.set('shadow')

    // Natives are going to be downloaded from our cloud
    exclude "native-binaries/*"

    dependencies {
        include(dependency('com.labymedia:ultralight-java-base'))
        include(dependency('com.labymedia:ultralight-java-databind'))
        include(dependency('com.thealtening.api:api'))
        include(project(":theme"))
    }
}

jar {
    from "LICENSE"
}

task remapShadow(type: RemapJarTask, dependsOn: shadowJar) {
    setInput(shadowJar.archiveFile)
    remapAccessWidener.set(true)
    addNestedDependencies.set(remapJar.addNestedDependencies)
}

build.dependsOn remapShadow

