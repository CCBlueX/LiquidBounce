/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2016 - 2022 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id "fabric-loom"
    id "org.jetbrains.kotlin.jvm"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "org.jlleitschuh.gradle.ktlint" version "11.0.0"
}

import net.fabricmc.loom.task.RemapJarTask

ktlint {
    enableExperimentalRules = true
    ignoreFailures = true
    disabledRules = ["no-wildcard-imports", "no-blank-line-before-rbrace"]

    reporters {
        reporter "plain"
        reporter "checkstyle"
    }

}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/liquidbounce.accesswidener")
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url = "https://maven.fabricmc.net/" }
    maven { url = "https://jitpack.io" }
    maven {
        name = 'TerraformersMC'
        url = 'https://maven.terraformersmc.com/'
    }
}

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    // Libraries (required mods)

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    // MultiConnect API
    modImplementation ("net.earthcomputer.multiconnect:multiconnect-api:${project.multiconnect_version}") { transitive = false }

    /*
        Recommended mods (on IDE)
     */
    // modRuntimeOnly ("net.earthcomputer.multiconnect:multiconnect:${project.multiconnect_version}") { transitive = false }
    modRuntimeOnly "com.terraformersmc:modmenu:${project.mod_menu_version}"
    // modRuntime "com.github.CaffeineMC:sodium-fabric:${project.sodium_version}"
    // modRuntimeOnly "com.github.CaffeineMC:lithium-fabric:${project.lithium_version}"
    // modRuntime "com.github.CaffeineMC:phosphor-fabric:${project.phosphor_version}"

    // Baritone
//    modRuntime ("com.github.CCBlueX:baritone:${project.minecraft_version}-SNAPSHOT") {
//        exclude group: "org.ow2.asm", module: "asm-debug-all"
//        exclude group: "org.lwjgl.lwjgl", module: "lwjgl"
//        exclude group: "org.lwjgl.lwjgl", module: "lwjgl-platform"
//        exclude group: "net.java.jinput", module: "jinput"
//        exclude group: "net.java.jinput", module: "jinput-platform"
//        exclude group: "net.sf.jopt-simple", module: "jopt-simple"
//    }

    // fix nullable imports
    implementation "com.google.code.findbugs:jsr305:3.0.2"

    // Client libraries
    implementation ('com.thealtening.api:api:4.1.0') {
        exclude group: 'com.google.code.gson', module: 'gson'
    }

    implementation "com.github.CCBlueX:Elixir:1.2.4"

    implementation "com.labymedia:ultralight-java-base:0.4.6"
    implementation "com.labymedia:ultralight-java-databind:0.4.6"
    implementation "com.labymedia:ultralight-java-gpu:0.4.6"

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(":theme")

    // Test libraries

    testImplementation "org.junit.jupiter:junit-jupiter:5.9.2"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.18 upwards uses Java 17.
    it.options.release = 17
}

tasks.withType(Test) {
    useJUnitPlatform()
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

compileKotlin {
    kotlinOptions {
        suppressWarnings = true
        jvmTarget = 17
    }
}

shadowJar {
    archiveClassifier.set('shadow')

    // Natives are going to be downloaded from our cloud
    exclude "native-binaries/*"

    dependencies {
        include(dependency('com.labymedia:ultralight-java-base'))
        include(dependency('com.labymedia:ultralight-java-databind'))
        include(dependency('com.labymedia:ultralight-java-gpu'))
        include(dependency('com.thealtening.api:api'))
        include(dependency('com.github.CCBlueX:Elixir'))
        include(project(":theme"))
    }
}

jar {
    from "LICENSE"
}

task remapShadow(type: RemapJarTask, dependsOn: shadowJar) {
    setInput(shadowJar.archiveFile)
    remapAccessWidener.set(true)
    addNestedDependencies.set(remapJar.addNestedDependencies)
}

build.dependsOn remapShadow

task copyZipInclude(type: Copy) {
    from 'zip_include/'
    into 'build/libs/zip'
}

build.dependsOn copyZipInclude
