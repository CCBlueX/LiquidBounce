/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2023 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id 'fabric-loom'
    id 'org.jetbrains.kotlin.jvm'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.jlleitschuh.gradle.ktlint' version '11.5.1'
    id 'com.gorylenko.gradle-git-properties' version '2.4.1'
}

ktlint {
    enableExperimentalRules = true
    ignoreFailures = true
    disabledRules = ['no-wildcard-imports', 'no-blank-line-before-rbrace']

    reporters {
        reporter 'plain'
        reporter 'checkstyle'
    }

}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    accessWidenerPath = file('src/main/resources/liquidbounce.accesswidener')
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url = 'https://maven.fabricmc.net/' }
    maven { url = 'https://jitpack.io' }
    maven {
        name = 'TerraformersMC'
        url = 'https://maven.terraformersmc.com/'
    }
    maven { url = 'https://repo.viaversion.com/' }
}

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    // Libraries (required mods)

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    modImplementation 'com.viaversion:viaversion:4.7.1-SNAPSHOT'
    modImplementation 'com.github.FlorianMichael:ViaLoadingBase:4.4.8'

    // Recommended mods (on IDE)
    modRuntimeOnly "com.terraformersmc:modmenu:${project.mod_menu_version}"

    modRuntimeOnly "com.github.CaffeineMC:sodium-fabric:${project.sodium_version}"
    modRuntimeOnly "com.github.CaffeineMC:lithium-fabric:${project.lithium_version}"
    // modRuntimeOnly "com.github.CaffeineMC:phosphor-fabric:${project.phosphor_version}"

    // fix nullable imports
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // Client libraries
    implementation('com.thealtening.api:api:4.1.0') {
        exclude group: 'com.google.code.gson', module: 'gson'
    }

    implementation 'com.github.CCBlueX:Elixir:1.2.6'

    implementation 'com.labymedia:ultralight-java-base:0.4.12'
    implementation 'com.labymedia:ultralight-java-databind:0.4.12'
    implementation 'com.labymedia:ultralight-java-gpu:0.4.12'
    implementation 'com.labymedia:ultralight-java-glfw-opengl-util:0.4.12'

    implementation 'org.graalvm.sdk:graal-sdk:23.0.1'
    implementation 'org.graalvm.truffle:truffle-api:23.0.1'
    implementation 'org.graalvm.js:js:23.0.1'

    runtimeOnly 'org.graalvm.tools:profiler:23.0.1'
    runtimeOnly 'org.graalvm.tools:chromeinspector:23.0.1'

    // https://mvnrepository.com/artifact/io.netty/netty-codec-http
    implementation 'io.netty:netty-codec-http:4.1.82.Final'
    // https://mvnrepository.com/artifact/io.netty/netty-handler-proxy
    implementation 'io.netty:netty-handler-proxy:4.1.82.Final'

    implementation 'com.vdurmont:semver4j:3.1.0'

    // Test libraries

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
}

processResources {
    inputs.property 'version', project.version

    inputs.property 'minecraft_version', minecraft_version
    inputs.property 'fabric_version', fabric_version
    inputs.property 'loader_version', loader_version
    inputs.property 'fabric_kotlin_version', fabric_kotlin_version

    filesMatching('fabric.mod.json') {
        expand([
                version              : project.version,
                minecraft_version    : minecraft_version,
                fabric_version       : fabric_version,
                loader_version       : loader_version,
                fabric_kotlin_version: fabric_kotlin_version
        ])
    }
}

// The following code will include the theme into the build

tasks.register('makeTheme', Exec) {
    workingDir file('src-theme')
    commandLine 'python', 'build.py'
    doLast {
        println 'Successfully exported theme.zip'
    }
}

sourceSets {
    main {
        resources {
            srcDirs 'src-theme/resources'
        }
    }
}

processResources.dependsOn makeTheme

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = 'UTF-8'

    // Minecraft 1.18 upwards uses Java 17.
    it.options.release = 17
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

compileKotlin {
    kotlinOptions {
        suppressWarnings = true
        jvmTarget = 17
    }
}

shadowJar {
    archiveClassifier.set('shadow')

    // Natives are going to be downloaded from our cloud
    exclude 'native-binaries/*'

    dependencies {
        include(dependency('com.labymedia:ultralight-java-base'))
        include(dependency('com.labymedia:ultralight-java-databind'))
        include(dependency('com.labymedia:ultralight-java-gpu'))
        include(dependency('com.labymedia:ultralight-java-glfw-opengl-util'))
        include(dependency('com.thealtening.api:api'))
        include(dependency('com.github.CCBlueX:Elixir'))
        include(dependency('org.graalvm.sdk:graal-sdk:23.0.1'))
        include(dependency('org.graalvm.truffle:truffle-api:23.0.1'))
        include(dependency('org.graalvm.js:js:23.0.1'))
        include(dependency('io.netty:netty-codec-http'))
        include(dependency('io.netty:netty-handler-proxy'))
        include(dependency('com.vdurmont:semver4j:3.1.0'))
    }
}

jar {
    from 'LICENSE'
}

remapJar {
    inputFile = shadowJar.archiveFile
}

tasks.register('copyZipInclude', Copy) {
    from 'zip_include/'
    into 'build/libs/zip'
}

build.dependsOn copyZipInclude
