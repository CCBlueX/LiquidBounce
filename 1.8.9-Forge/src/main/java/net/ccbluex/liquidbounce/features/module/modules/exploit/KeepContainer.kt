package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.KeyEvent
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.ScreenEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.minecraft.client.gui.inventory.GuiContainer
import net.minecraft.client.gui.inventory.GuiInventory
import net.minecraft.network.play.client.C0DPacketCloseWindow
import net.minecraft.network.play.server.S2EPacketCloseWindow
import org.lwjgl.input.Keyboard

/**
 * LiquidBounce Hacked Client
 * A minecraft forge injection client using Mixin
 *
 * @game Minecraft
 * @author CCBlueX
 */
@ModuleInfo(name = "KeepContainer", description = "Allows you to open a formerly closed inventory container everywhere. (Press INSERT Key to open)", category = ModuleCategory.EXPLOIT)
class KeepContainer : Module() {
    private var container: GuiContainer? = null

    override fun onDisable() {
        if (container != null) {
            mc.netHandler.addToSendQueue(C0DPacketCloseWindow(container!!.inventorySlots.windowId))
        }

        container = null
    }

    @EventTarget
    fun onGui(event: ScreenEvent) {
        if (event.guiScreen is GuiContainer && event.guiScreen !is GuiInventory)
            container = event.guiScreen
    }

    @EventTarget
    fun onKey(event: KeyEvent) {
        if (event.key == Keyboard.KEY_INSERT) {
            if (container == null)
                return

            mc.displayGuiScreen(container)
        }
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        when (event.packet) {
            is C0DPacketCloseWindow -> {
                event.cancelEvent()
            }
            is S2EPacketCloseWindow -> {
                if (container != null
                        && container!!.inventorySlots != null
                        && event.packet.windowId == container!!.inventorySlots.windowId)
                    container = null
            }
        }
    }
}