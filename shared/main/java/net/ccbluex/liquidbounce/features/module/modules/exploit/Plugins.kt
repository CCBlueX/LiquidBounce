/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import joptsimple.internal.Strings
import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.timer.TickTimer
import java.util.*

@ModuleInfo(name = "Plugins", description = "Allows you to see which plugins the server is using.", category = ModuleCategory.EXPLOIT)
class Plugins : Module() {
    private val tickTimer = TickTimer()

    override fun onEnable() {
        if (mc.thePlayer == null) {
            return
        }

        mc.netHandler.addToSendQueue(classProvider.createCPacketTabComplete("/"))
        tickTimer.reset()
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent?) {
        tickTimer.update()

        if (tickTimer.hasTimePassed(20)) {
            ClientUtils.displayChatMessage("§8[§9§l${LiquidBounce.CLIENT_NAME}§8] §3Plugins check timed out...")
            tickTimer.reset()
            state = false
        }
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        if (!classProvider.isSPacketTabComplete(event.packet)) {
            return
        }

        val s3APacketTabComplete = event.packet.asSPacketTabComplete()
        val plugins = getPluginNames(s3APacketTabComplete.completions)
        val pluginsMsg = if (plugins.isEmpty()) {
            "No plugins found."
        } else {
            "Plugins (" + plugins.size + "): §8" + Strings.join(plugins, "§3, §8")
        }

        ClientUtils.displayChatMessage("§8[§9§l${LiquidBounce.CLIENT_NAME}§8] §3$pluginsMsg")
        tickTimer.reset()
        state = false
    }

    private fun getPluginNames(commands: Array<String>): List<String> {
        val pluginNames: MutableList<String> = LinkedList()

        for (command in commands) {
            val commandComponents = command.split(":")
            if (commandComponents.size <= 1) {
                continue
            }

            val pluginName = commandComponents[0].substring(1)
            if (pluginName !in pluginNames) {
                pluginNames.add(pluginName)
            }
        }

        return pluginNames
    }
}