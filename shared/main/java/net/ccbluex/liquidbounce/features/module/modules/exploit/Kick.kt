/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketUseEntity
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.WorkerUtils
import net.ccbluex.liquidbounce.value.ListValue
import kotlin.random.Random

@ModuleInfo(name = "Kick", description = "Allows you to kick yourself from a server.", category = ModuleCategory.EXPLOIT, canEnable = false)
class Kick : Module()
{
	private val modeValue = ListValue("Mode", arrayOf("Quit", "InvalidPacket", "SelfHurt", "IllegalChat", "PacketSpam"), "Quit")

	override fun onEnable()
	{
		val theWorld = mc.theWorld ?: return
		val thePlayer = mc.thePlayer ?: return

		if (mc.isIntegratedServerRunning)
		{
			ClientUtils.displayChatMessage(thePlayer, "\u00A7c\u00A7lError: \u00A7aYou can't enable \u00A7c\u00A7l'Kick' \u00A7ain SinglePlayer.")
			return
		}

		val networkManager = mc.netHandler.networkManager

		when (modeValue.get().toLowerCase())
		{
			"quit" -> theWorld.sendQuittingDisconnectingPacket()
			"invalidpacket" -> networkManager.sendPacketWithoutEvent(classProvider.createCPacketPlayerPosition(Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, !thePlayer.onGround))
			"selfhurt" -> networkManager.sendPacketWithoutEvent(classProvider.createCPacketUseEntity(thePlayer, ICPacketUseEntity.WAction.ATTACK))
			"illegalchat" -> thePlayer.sendChatMessage("${Random.nextInt()}\u00A7\u00A7\u00A7${Random.nextInt()}")

			"packetspam" ->
			{
				WorkerUtils.workers.submit {
					repeat(9999) {
						networkManager.sendPacketWithoutEvent(classProvider.createCPacketPlayerPosition(it.toDouble(), it.toDouble(), it.toDouble(), Random.nextBoolean()))
					}
				}
			}
		}
	}
}
