/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import io.netty.buffer.Unpooled
import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.api.MinecraftVersion
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.misc.RandomUtils
import net.ccbluex.liquidbounce.value.ListValue
import java.io.ByteArrayOutputStream
import java.io.DataOutputStream
import java.io.IOException

// Original author is Rilshrink (https://github.com/Rilshrink/Minecraft-Disablers) [Most of disablers are available in PingSpoof]
@ModuleInfo(name = "Disabler", description = "Bye! Bye! Bad Anticheat -Rilshrink", category = ModuleCategory.EXPLOIT, supportedVersions = [MinecraftVersion.MC_1_8])
class Disabler : Module()
{
	private val modeValue = object : ListValue("Mode", arrayOf("ACMC.pl", "ColdNetwork", "Kauri", "OnlyMC", "HazelMC", "Verus", "EarthPol"), "Verus")
	{
		override fun onChange(oldValue: String, newValue: String)
		{
			onDisable()
		}

		override fun onChanged(oldValue: String, newValue: String)
		{
			onEnable()
		}
	}

	override fun onEnable()
	{
		val pingSpoof = LiquidBounce.moduleManager[PingSpoof::class.java] as PingSpoof

		when (modeValue.get().toLowerCase())
		{
			"acmc.pl" ->
			{
				pingSpoof.keepAliveModeValue.set("Delay")
				pingSpoof.keepAliveMinDelayValue.set(500)
				pingSpoof.keepAliveMaxDelayValue.set(600)

				pingSpoof.confirmTransactionModeValue.set("Delay")
				pingSpoof.confirmTransactionMinDelayValue.set(1000)
				pingSpoof.confirmTransactionMaxDelayValue.set(1250)

				pingSpoof.state = true
			}

			"coldnetwork" ->
			{
				ClientUtils.displayChatMessage(mc.thePlayer, "\u00A78[\u00A7c\u00A7lColdNetwork Disabler\u00A78] \u00A7c\u00A7lThe disabler only works temporary 10 minutes\u00A7r\u00A7c, ping spoof alerts over time.")

				pingSpoof.confirmTransactionModeValue.set("Delay")
				pingSpoof.confirmTransactionMinDelayValue.set(2000)
				pingSpoof.confirmTransactionMaxDelayValue.set(2500)

				pingSpoof.state = true
			}

			"kauri" ->
			{
				ClientUtils.displayChatMessage(mc.thePlayer, "\u00A78[\u00A7c\u00A7lKauri Disabler\u00A78] \u00A7c\u00A7lRe-login for disabler to work.")

				pingSpoof.confirmTransactionModeValue.set("Cancel")

				pingSpoof.state = true
				state = false
			}

			"onlymc" ->
			{
				pingSpoof.keepAliveModeValue.set("TamperKey")

				pingSpoof.confirmTransactionModeValue.set("Delay")
				pingSpoof.confirmTransactionMinDelayValue.set(5000)
				pingSpoof.confirmTransactionMaxDelayValue.set(6000)

				pingSpoof.state = true
			}

			"hazelmc" ->
			{
				pingSpoof.keepAliveModeValue.set("Delay")
				pingSpoof.keepAliveMinDelayValue.set(5000)
				pingSpoof.keepAliveMaxDelayValue.set(6000)

				pingSpoof.confirmTransactionModeValue.set("Delay")
				pingSpoof.confirmTransactionMinDelayValue.set(50)
				pingSpoof.confirmTransactionMaxDelayValue.set(100)

				pingSpoof.state = true
			}
		}
	}

	@EventTarget
	fun onPacket(event: PacketEvent)
	{
		val thePlayer = mc.thePlayer ?: return
		val networkManager = mc.netHandler.networkManager

		val packet = event.packet

		val provider = classProvider

		if (provider.isCPacketPlayer(packet)) when (modeValue.get().toLowerCase())
		{
			"acmc.pl", "coldnetwork" ->
			{
				networkManager.sendPacketWithoutEvent(provider.createCPacketInput())

				if (thePlayer.ticksExisted % 15 == 0) packet.asCPacketPlayer().y += RandomUtils.nextFloat(100.0F, 1000.0F)
			}

			"earthpol" -> if (thePlayer.ticksExisted % 15 == 0)
			{
				try
				{
					val baos = ByteArrayOutputStream()
					val dos = DataOutputStream(baos)
					dos.writeUTF(thePlayer.gameProfile.name)

					val byteBuf = provider.createPacketBuffer(Unpooled.buffer())
					byteBuf.writeBytes(baos.toByteArray())

					networkManager.sendPacketWithoutEvent(provider.createCPacketCustomPayload("matrix:geyser", byteBuf)) // This is due to a config error by turning on Matrix geyser support
				}
				catch (ignored: IOException)
				{
				}
			}
		}
	}

	fun onUpdate(@Suppress("UNUSED_PARAMETER") event: UpdateEvent)
	{
		val thePlayer = mc.thePlayer ?: return
		val timer = mc.timer
		val networkManager = mc.netHandler.networkManager

		val provider = classProvider

		when (modeValue.get().toLowerCase())
		{
			"acmc.pl" -> timer.timerSpeed = 0.4F
			"coldnetwork" -> timer.timerSpeed = 0.6F
			"onlymc" -> if (thePlayer.ticksExisted % 50 == 0) networkManager.sendPacketWithoutEvent(provider.createCPacketPlayerPosLook(thePlayer.posX, thePlayer.posY - RandomUtils.nextFloat(1000F, 2000F), thePlayer.posZ, thePlayer.rotationYaw, thePlayer.rotationPitch, thePlayer.onGround))
			"hazelmc" -> networkManager.sendPacket(provider.createCPacketKeepAlive(0))
		}
	}
}
