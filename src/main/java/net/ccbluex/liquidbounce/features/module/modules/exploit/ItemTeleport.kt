/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.Render3DEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.utils.ClientUtils.displayChatMessage
import net.ccbluex.liquidbounce.utils.MovementUtils.forward
import net.ccbluex.liquidbounce.utils.extensions.MathExtensionsKt.toDegreesF
import net.ccbluex.liquidbounce.utils.render.RenderUtils
import net.ccbluex.liquidbounce.utils.PacketUtils.sendPacket
import net.ccbluex.liquidbounce.utils.PacketUtils.sendPackets
import net.ccbluex.liquidbounce.utils.extensions.BlockExtensionKt.getBlock
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.block.material.Material
import net.minecraft.client.entity.EntityPlayerSP
import net.minecraft.client.renderer.entity.RenderManager
import net.minecraft.client.renderer.GlStateManager.resetColor
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minecraft.util.AxisAlignedBB
import net.minecraft.util.BlockPos
import net.minecraft.util.MovingObjectPosition
import org.lwjgl.opengl.GL11.*
import org.lwjgl.input.Mouse

import javax.vecmath.Vector3f
import java.awt.*
import java.util.ArrayList
import java.util.Arrays
import java.util.List

object ItemTeleport : Module("ItemTeleport", ModuleCategory.EXPLOIT, hideModule = false) {

    private val mode by ListValue("Mode", arrayOf("New", "Old"), "New")
    private val resetAfterTp by BoolValue("ResetAfterTP", true)
    private val buttonValue by ListValue("Button", arrayOf("Left", "Right", "Middle"), "Middle")

    private var delay
    private var endPos: BlockPos
    private var objectPosition: MovingObjectPosition

    override fun onDisable() {
        delay = 0
        endPos = null
        super.onDisable()
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        if (mc.currentScreen == null && Mouse.isButtonDown(Arrays.asList(buttonValue.getValues()).indexOf(buttonValue.get())) && delay <= 0) {
            endPos = objectPosition.blockPos

            if (getBlock(endPos).material == Material.air) {
                endPos = null
                return
            }

            displayChatMessage("§7[§8§lItemTeleport§7] §3Position was set to §8" + endPos.x + "§3, §8" + endPos.y + "§3, §8" + endPos.z)
            delay = 6
        }

        if (delay > 0) --delay

        val thePlayer = mc.thePlayer ?: return

        if (endPos != null && mc.thePlayer.isSneaking()) {
            if (!thePlayer.onGround) {
                var endX = endPos.x + 0.5
                var endY = endPos.y + 1
                var endZ = endPos.z + 0.5

                when (mode.lowercase()) {
                    "old" -> {
                        for (val vector3f : vanillaTeleportPositions(endX, endY, endZ, 4)) {
                            sendPacket(C04PacketPlayerPosition(vector3f.getX(), vector3f.getY(), vector3f.getZ(), false))
                        }
                    }
                    "new" -> {
                        for (val vector3f : vanillaTeleportPositions(endX, endY, endZ, 5)) {
                            sendPackets(
                                C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, true),
                                C04PacketPlayerPosition(vector3f.x, vector3f.y, vector3f.z, true),
                                C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, true),
                                C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY + 4.0, thePlayer.posZ, true),
                                C04PacketPlayerPosition(vector3f.x, vector3f.y, vector3f.z, true)
                            )
                            forward(0.04)
                        }
                    }
                }

                if (resetAfterTp) endPos = null

                displayChatMessage("§7[§8§lItemTeleport§7] §3Tried to collect items")
            } else
                thePlayer.jump()
        }
    }

    @EventTarget
    fun onRender3D(event: Render3DEvent) {
        objectPosition = mc.thePlayer.rayTrace(1000, event.getPartialTicks())

        if (objectPosition.blockPos == null) {
            return
        }
   
        var x = objectPosition.blockPos.z
        var y = objectPosition.blockPos.y
        var z = objectPosition.blockPos.y

        if (getBlock(objectPosition.blockPos).material != Material.air) {
            var renderManager = mc.renderManager

            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
            glEnable(GL_BLEND)
            glLineWidth(2F)
            glDisable(GL_TEXTURE_2D)
            glDisable(GL_DEPTH_TEST)
            glDepthMask(false)
            RenderUtils.glColor(getBlock(objectPosition.blockPos.up()).material != Material.air ? Color(255, 0, 0, 90) : Color(0, 255, 0, 90))
            RenderUtils.drawFilledBox(AxisAlignedBB(x - renderManager.renderPosX, (y + 1) - renderManager.renderPosY, z - renderManager.renderPosZ, x - renderManager.renderPosX + 1, y + 1.2 - renderManager.renderPosY, z - renderManager.renderPosZ + 1))
            glEnable(GL_TEXTURE_2D)
            glEnable(GL_DEPTH_TEST)
            glDepthMask(true)
            glDisable(GL_BLEND)

            RenderUtils.renderNameTag(Math.round(mc.thePlayer.getDistance(x, y, z)) + "m", x + 0.5, y + 1.7, z + 0.5)
            resetColor()
        }
    }

    private List<Vector3f> vanillaTeleportPositions(val tpX, val tpY, val tpZ, val speed) {
        var positions: List<Vector3f> = ArrayList<>()
        var posX = tpX - mc.thePlayer.posX
        var posZ = tpZ - mc.thePlayer.posZ
        var yaw = toDegreesF(Math.atan2(posZ, posX)) - 90F
        var tmpX
        var tmpY = mc.thePlayer.posY
        var tmpZ
        var steps = 1

        for (var d = speed; d < getDistance(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, tpX, tpY, tpZ); d += speed) {
            steps++
        }

        for (var d = speed; d < getDistance(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, tpX, tpY, tpZ); d += speed) {
            tmpX = mc.thePlayer.posX - Math.sin(Math.toRadians(yaw)) * d
            tmpZ = mc.thePlayer.posZ + Math.cos(Math.toRadians(yaw)) * d
            tmpY -= (mc.thePlayer.posY - tpY) / steps
            positions.add(Vector3f(tpX.float(), tpY.float(), tpZ.float()))
        }

        positions.add(Vector3f(tpX.float(), tpY.float(), tpZ.float()))

        return positions;
    }

    private val getDistance(val x1, val y1, val z1, val x2, val y2, val z2) {
        val d0 = x1 - x2
        val d1 = y1 - y2
        val d2 = z1 - z2
        return Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2)
    }

}
