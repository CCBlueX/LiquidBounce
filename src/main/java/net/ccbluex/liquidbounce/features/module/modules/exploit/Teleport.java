/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import net.ccbluex.liquidbounce.event.*;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.MovementUtils;
import net.ccbluex.liquidbounce.utils.PathUtils;
import net.ccbluex.liquidbounce.utils.render.RenderUtils;
import net.ccbluex.liquidbounce.utils.timer.TickTimer;
import net.ccbluex.liquidbounce.value.BoolValue;
import net.ccbluex.liquidbounce.value.ListValue;
import net.minecraft.block.BlockFence;
import net.minecraft.block.BlockSnow;
import net.minecraft.block.material.Material;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.client.renderer.entity.RenderManager;
import net.minecraft.init.Blocks;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.util.Vec3;
import org.lwjgl.input.Mouse;

import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static net.ccbluex.liquidbounce.utils.extensions.BlockExtensionKt.getBlock;
import static org.lwjgl.opengl.GL11.*;

@ModuleInfo(name = "Teleport", description = "Allows you to teleport around.", category = ModuleCategory.EXPLOIT)
public class Teleport extends Module {

    private final BoolValue ignoreNoCollision = new BoolValue("IgnoreNoCollision", true);
    private final ListValue modeValue = new ListValue("Mode", new String[] {"Blink", "Flag", "Rewinside", "OldRewinside", "Spoof", "Minesucht", "AAC3.5.0"}, "Blink");
    private final ListValue buttonValue = new ListValue("Button", new String[] {"Left", "Right", "Middle"}, "Middle");
    private final TickTimer flyTimer = new TickTimer();
    private boolean hadGround;
    private double fixedY;
    private final List<Packet<?>> packets = new ArrayList<>();
    private boolean disableLogger = false;
    private boolean zitter = false;
    private boolean doTeleport = false;
    private boolean freeze = false;
    private final TickTimer freezeTimer = new TickTimer();

    private int delay;
    private BlockPos endPos;
    private MovingObjectPosition objectPosition;

    @Override
    public void onEnable() {
        if (modeValue.get().equals("AAC3.5.0")) {
            ClientUtils.INSTANCE.displayChatMessage("§c>>> §a§lTeleport §fAAC 3.5.0 §c<<<");
            ClientUtils.INSTANCE.displayChatMessage("§cHow to teleport: §aPress " + buttonValue.get() + " mouse button.");
            ClientUtils.INSTANCE.displayChatMessage("§cHow to cancel teleport: §aDisable teleport module.");
        }
    }

    @Override
    public void onDisable() {
        fixedY = 0D;
        delay = 0;
        mc.timer.timerSpeed = 1F;
        endPos = null;
        hadGround = false;
        freeze = false;
        disableLogger = false;
        flyTimer.reset();

        packets.clear();

        super.onDisable();
    }

    @EventTarget
    public void onUpdate(final UpdateEvent event) {
        final int buttonIndex = Arrays.asList(buttonValue.getValues()).indexOf(buttonValue.get());

        EntityPlayerSP thePlayer = mc.thePlayer;

        if (thePlayer == null)
            return;

        if (modeValue.get().equals("AAC3.5.0")) {
            freezeTimer.update();

            if (freeze && freezeTimer.hasTimePassed(40)) {
                freezeTimer.reset();
                freeze = false;
                setState(false);
            }

            if (!flyTimer.hasTimePassed(60)) {
                flyTimer.update();

                if (thePlayer.onGround) {
                    thePlayer.jump();
                } else {
                    MovementUtils.INSTANCE.forward(zitter ? -0.21D : 0.21D);
                    zitter = !zitter;
                }

                hadGround = false;
                return;
            }

            if (thePlayer.onGround)
                hadGround = true;

            if (!hadGround)
                return;

            if (thePlayer.onGround)
                thePlayer.setPositionAndUpdate(thePlayer.posX, thePlayer.posY + 0.2D, thePlayer.posZ);

            final float vanillaSpeed = 2F;

            thePlayer.capabilities.isFlying = false;

            thePlayer.motionX = 0.0;
            thePlayer.motionY = 0.0;
            thePlayer.motionZ = 0.0;

            if (mc.gameSettings.keyBindJump.isKeyDown())
                thePlayer.motionY = thePlayer.motionY + vanillaSpeed;
            if (mc.gameSettings.keyBindSneak.isKeyDown())
                thePlayer.motionY = thePlayer.motionY - vanillaSpeed;
            MovementUtils.INSTANCE.strafe(vanillaSpeed);

            if (Mouse.isButtonDown(buttonIndex) && !doTeleport) {
                thePlayer.setPositionAndUpdate(thePlayer.posX, thePlayer.posY - 11, thePlayer.posZ);

                disableLogger = true;
                packets.forEach(packet -> mc.getNetHandler().addToSendQueue(packet));

                freezeTimer.reset();
                freeze = true;
            }

            doTeleport = Mouse.isButtonDown(buttonIndex);
            return;
        }

        if (mc.currentScreen == null && Mouse.isButtonDown(buttonIndex) && delay <= 0) {
            endPos = objectPosition.getBlockPos();


            if (getBlock(endPos).getMaterial() == Material.air) {
                endPos = null;
                return;
            }

            ClientUtils.INSTANCE.displayChatMessage("§7[§8§lTeleport§7] §3Position was set to §8" + endPos.getX() + "§3, §8" + ((getBlock(objectPosition.getBlockPos()).getCollisionBoundingBox(mc.theWorld, objectPosition.getBlockPos(), getBlock(objectPosition.getBlockPos()).getDefaultState()) == null ? endPos.getY() + 1 : getBlock(objectPosition.getBlockPos()).getCollisionBoundingBox(mc.theWorld, objectPosition.getBlockPos(), getBlock(objectPosition.getBlockPos()).getDefaultState()).maxY) + fixedY) + "§3, §8" + endPos.getZ());
            delay = 6;
        }

        if(delay > 0)
            --delay;

        if(endPos != null) {
            final double endX = (double) endPos.getX() + 0.5D;
            final double endY = (getBlock(objectPosition.getBlockPos())
                    .getCollisionBoundingBox(mc.theWorld, objectPosition.getBlockPos(), getBlock(objectPosition.getBlockPos()).getDefaultState()) == null ? endPos.getY() + 1 : getBlock(objectPosition.getBlockPos()).getCollisionBoundingBox(mc.theWorld, objectPosition.getBlockPos(), getBlock(objectPosition.getBlockPos()).getDefaultState()).maxY) + fixedY;
            final double endZ = (double) endPos.getZ() + 0.5D;

            switch(modeValue.get().toLowerCase()) {
                case "blink":
                    if (thePlayer.isSneaking()) {
                        // Sneak
                        mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));

                        // Teleport
                        PathUtils.findBlinkPath(endX, endY, endZ).forEach(vector3d -> {
                            mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(vector3d.x, vector3d.y, vector3d.z, true));
                            thePlayer.setPosition(endX, endY, endZ);
                        });

                        // Sneak
                        mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));

                        // Notify
                        ClientUtils.INSTANCE.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
                    }
                    break;
                case "flag":
                    if (thePlayer.isSneaking()) {
                        // Sneak
                        mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));

                        // Teleport
                        mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, true));
                        mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(endX, endY, endZ, true));
                        mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, true));
                        mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY + 5D, thePlayer.posZ, true));
                        mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(endX, endY, endZ, true));
                        mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(thePlayer.posX + 0.5D, thePlayer.posY, thePlayer.posZ + 0.5D, true));

                        MovementUtils.INSTANCE.forward(0.04D);

                        // Sneak
                        mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
                        // Notify
                        ClientUtils.INSTANCE.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
                    }
                    break;
                case "rewinside":
                    thePlayer.motionY = 0.1;
                    mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(endX, endY, endZ, true));
                    mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY + 0.6D, thePlayer.posZ, true));

                    if ((int) thePlayer.posX == (int) endX && (int) thePlayer.posY == (int) endY && (int) thePlayer.posZ == (int) endZ) {
                        ClientUtils.INSTANCE.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
                        endPos = null;
                    } else
                        ClientUtils.INSTANCE.displayChatMessage("§7[§8§lTeleport§7] §3Teleport try...");
                    break;
                case "oldrewinside":
                    thePlayer.motionY = 0.1;

                    mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, true));
                    mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(endX, endY, endZ, true));
                    mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, true));
                    mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, true));
                    mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(endX, endY, endZ, true));
                    mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, true));

                    if ((int) thePlayer.posX == (int) endX && (int) thePlayer.posY == (int) endY && (int) thePlayer.posZ == (int) endZ) {
                        ClientUtils.INSTANCE.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
                        endPos = null;
                    } else
                        ClientUtils.INSTANCE.displayChatMessage("§7[§8§lTeleport§7] §3Teleport try...");

                    MovementUtils.INSTANCE.forward(0.04D);
                    break;
                case "minesucht":
                    if (!thePlayer.isSneaking())
                        break;

                    mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(endX, endY, endZ, true));
                    ClientUtils.INSTANCE.displayChatMessage("§7[§8§lTeleport§7] §3You were teleported to §8" + endX + "§3, §8" + endY + "§3, §8" + endZ);
                    break;
            }
        }
    }

    @EventTarget
    public void onRender3D(final Render3DEvent event) {
        if (modeValue.get().equals("AAC3.5.0"))
            return;

        EntityPlayerSP thePlayer = mc.thePlayer;

        if (thePlayer == null) {
            return;
        }


        Vec3 entityLookVec = thePlayer.getLookVec();

        final Vec3 lookVec = new Vec3(entityLookVec.xCoord * 300, entityLookVec.yCoord * 300, entityLookVec.zCoord * 300);
        final Vec3 posVec = new Vec3(thePlayer.posX, thePlayer.posY + 1.62, thePlayer.posZ);

        objectPosition = mc.theWorld.rayTraceBlocks(posVec, posVec.add(lookVec), false, ignoreNoCollision.get(), false);

        if (objectPosition == null || objectPosition.getBlockPos() == null)
            return;

        final BlockPos beloBlockPos = new BlockPos(objectPosition.getBlockPos().getX(), objectPosition.getBlockPos().getY() - 1, objectPosition.getBlockPos().getZ());

        fixedY = getBlock(objectPosition.getBlockPos()) instanceof BlockFence ?
                (mc.theWorld.getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset(objectPosition.getBlockPos().getX() + 0.5D - thePlayer.posX, objectPosition.getBlockPos().getY() + 1.5D - thePlayer.posY, objectPosition.getBlockPos().getZ() + 0.5D - thePlayer.posZ)).isEmpty() ? 0.5D : 0D)
                : getBlock(beloBlockPos) instanceof BlockFence
                ? (!mc.theWorld.getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset(objectPosition.getBlockPos().getX() + 0.5D - thePlayer.posX, objectPosition.getBlockPos().getY() + 0.5D - thePlayer.posY, objectPosition.getBlockPos().getZ() + 0.5D - thePlayer.posZ)).isEmpty() || getBlock(objectPosition.getBlockPos()).getCollisionBoundingBox(mc.theWorld, objectPosition.getBlockPos(), getBlock(objectPosition.getBlockPos()).getDefaultState()) == null ? 0D : 0.5D - 1)
                : getBlock(objectPosition.getBlockPos()) instanceof BlockSnow ? 1 - 0.125D : 0D;

        final int x = objectPosition.getBlockPos().getX();
        final double y = (getBlock(objectPosition.getBlockPos()).getCollisionBoundingBox(mc.theWorld, objectPosition.getBlockPos(), getBlock(objectPosition.getBlockPos()).getDefaultState()) == null ? objectPosition.getBlockPos().getY() + 1 : getBlock(objectPosition.getBlockPos()).getCollisionBoundingBox(mc.theWorld, objectPosition.getBlockPos(), getBlock(objectPosition.getBlockPos()).getDefaultState()).maxY) - 1D + fixedY;
        final int z = objectPosition.getBlockPos().getZ();

        if (getBlock(objectPosition.getBlockPos()) != Blocks.air) {
            final RenderManager renderManager = mc.getRenderManager();

            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
            glEnable(GL_BLEND);
            glLineWidth(2F);
            glDisable(GL_TEXTURE_2D);
            glDisable(GL_DEPTH_TEST);
            glDepthMask(false);
            RenderUtils.INSTANCE.glColor(modeValue.get().equals("Minesucht") && thePlayer.getPosition().getY() != y + 1 ? new Color(255, 0, 0, 90) : !mc.theWorld.getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset(x + 0.5D - thePlayer.posX, y + 1D - thePlayer.posY, z + 0.5D - thePlayer.posZ)).isEmpty() ? new Color(255, 0, 0, 90) : new Color(0, 255, 0, 90));
            RenderUtils.INSTANCE.drawFilledBox(AxisAlignedBB.fromBounds(x - renderManager.renderPosX, (y + 1) - renderManager.renderPosY, z - renderManager.renderPosZ, x - renderManager.renderPosX + 1.0D, y + 1.2D - renderManager.renderPosY, z - renderManager.renderPosZ + 1.0D));
            glEnable(GL_TEXTURE_2D);
            glEnable(GL_DEPTH_TEST);
            glDepthMask(true);
            glDisable(GL_BLEND);

            RenderUtils.INSTANCE.renderNameTag(Math.round(thePlayer.getDistance(x + 0.5D, y + 1D, z + 0.5D)) + "m", x + 0.5, y + 1.7, z + 0.5);
            glColor4f(1f, 1f, 1f, 1f);
        }
    }

    @EventTarget
    public void onMove(final MoveEvent event) {
        if (modeValue.get().equals("AAC3.5.0") && freeze) {
            event.zeroXZ();
        }
    }

    @EventTarget
    public void onPacket(final PacketEvent event) {
        final Packet<?> packet = event.getPacket();

        if (disableLogger)
            return;

        if (packet instanceof C03PacketPlayer) {
            final C03PacketPlayer packetPlayer = (C03PacketPlayer) packet;

            switch (modeValue.get().toLowerCase()) {
                case "spoof":
                    if (endPos == null)
                        break;

                    packetPlayer.x = endPos.getX() + 0.5D;
                    packetPlayer.y = endPos.getY() + 1;
                    packetPlayer.z = endPos.getZ() + 0.5D;

                    mc.thePlayer.setPosition(endPos.getX() + 0.5D, endPos.getY() + 1, endPos.getZ() + 0.5D);
                    break;
                case "aac3.5.0":
                    if (!flyTimer.hasTimePassed(60))
                        return;

                    event.cancelEvent();

                    if(!(packet instanceof C03PacketPlayer.C04PacketPlayerPosition) && !(packet instanceof C03PacketPlayer.C06PacketPlayerPosLook))
                        return;

                    packets.add(packet);
                    break;
            }
        }
    }

    @Override
    public String getTag() {
        return modeValue.get();
    }
}
