/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.verus

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.onlyCombat
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.DisablerMode
import net.ccbluex.liquidbounce.utils.PacketUtils.sendPacket
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.server.S32PacketConfirmTransaction

/*
* Working on Verus: b3898
* Tested on: anticheat-test.com, eu.loyisa.cn
*
* Disables most Combat checks on the Verus Anticheat
* Allowing for Verus reach
*
* Compatibility: Verus & UNCP/NCP
* Note: Don't turn this off/don't use onlyInGame option (you can get ban/kick)
*/

object VerusCombat : DisablerMode("VerusCombat") {
    private var transaction = false
    private var isOnCombat = false
    private var isSendingPacket = false

    override fun onPacket(event: PacketEvent) {
        val player = mc.thePlayer ?: return

        if (player.ticksExisted <= 20) {
            isOnCombat = false
            return
        }

        if (onlyCombat && !isOnCombat) {
            return
        }

        if (isSendingPacket) return // Prevent excessive re-entry (Which causes crash)

        val packet = event.packet

        /**
         * Works by just simply ignore transaction and not accepting them and send invalid one
         * to bypass Verus cancel transaction "patch" (not sending transaction for too long)
         * This could work on other anti-cheat that don't have a proper transaction handling system
         * But this will mostly be used on Verus, disabled any combat check related to transaction.
         *
         * Credit: @ghost / LB Nextgen
         */
        if (packet is S32PacketConfirmTransaction) {
            event.cancelEvent()
            try {
                isSendingPacket = true
                sendPacket(C0FPacketConfirmTransaction(if (transaction) 1 else -1, if (transaction) -1 else 1, transaction))
                transaction = !transaction
            } finally {
                isSendingPacket = false
            }
        }
    }

    override fun onAttack() {
        isOnCombat = true
    }

    override fun onWorld() {
        isOnCombat = false
    }
}