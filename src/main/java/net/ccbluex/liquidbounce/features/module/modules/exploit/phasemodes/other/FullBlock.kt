/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit.phasemodes.other

import net.ccbluex.liquidbounce.event.MoveEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.Phase.clipState
import net.ccbluex.liquidbounce.features.module.modules.exploit.Phase.shouldContinue
import net.ccbluex.liquidbounce.features.module.modules.exploit.phasemodes.PhaseMode
import net.minecraft.network.play.client.C03PacketPlayer
import kotlin.math.cos
import kotlin.math.sin

object FullBlock : PhaseMode("FullBlock") {

    override fun onMove(event: MoveEvent) {
        if (mc.thePlayer.isCollidedHorizontally) {
            clipState++
        }

        when (clipState) {
            1 -> {
                val direction = direction
                val cos = cos(direction)
                val sin = sin(direction)

                for (i in 0.025..2.0 step 0.025) {
                    shouldContinue = false
                    if (!isMoving || mc.theWorld.getCollidingBoundingBoxes(
                            mc.thePlayer,
                            mc.thePlayer.entityBoundingBox
                                .offset(
                                    -sin * i,
                                    0.0,
                                    cos * i
                                )
                        ).isNotEmpty()
                    ) continue

                    mc.thePlayer.setPositionAndUpdate(
                        mc.thePlayer.posX - sin * 0.06,
                        mc.thePlayer.posY,
                        mc.thePlayer.posZ + cos * 0.06
                    )

                    if (i > 0.06) {
                        value = i
                        yaw = direction
                        shouldContinue = true
                    }

                    event.zeroXZ()
                }

                clipState++
                if (!shouldContinue)
                    clipState = 0
                }

                break
            }

            2 -> {
                val value = if (isMoving) value else -0.06
                mc.thePlayer.setPositionAndUpdate(
                    mc.thePlayer.posX - (sin(yaw) * value),
                    mc.thePlayer.posY,
                    mc.thePlayer.posZ + (cos(yaw) * value)
                )
                clipState = 0
            }
        }
    }
}