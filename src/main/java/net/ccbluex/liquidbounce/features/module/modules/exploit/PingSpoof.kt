/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.utils.PacketUtils.sendPacket
import net.ccbluex.liquidbounce.utils.timer.TimeUtils.randomDelay
import net.ccbluex.liquidbounce.value.IntegerValue
import net.minecraft.network.Packet
import net.minecraft.network.play.client.C00PacketKeepAlive
import net.minecraft.network.play.client.C16PacketClientStatus

object PingSpoof : Module("PingSpoof", ModuleCategory.EXPLOIT) {

    private val maxDelayValue: IntegerValue = object : IntegerValue("MaxDelay", 1000, 0..5000) {
        override fun onChange(oldValue: Int, newValue: Int) = newValue.coerceAtLeast(minDelay)
    }
    private val maxDelay by maxDelayValue

    private val minDelay by object : IntegerValue("MinDelay", 500, 0..5000) {
        override fun onChange(oldValue: Int, newValue: Int) = newValue.coerceAtMost(maxDelay)

        override fun isSupported() = !maxDelayValue.isMinimal()
    }

    private val packetQueue = hashMapOf<Packet<*>, Long>()

    override fun onDisable() = packetQueue.clear()

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet

        if (mc.thePlayer == null) {
            return
        }

        if ((packet is C00PacketKeepAlive || packet is C16PacketClientStatus) && packet !in packetQueue) {
            event.cancelEvent()

            synchronized(packetQueue) {
                packetQueue[packet] =
                    System.currentTimeMillis() + randomDelay(minDelay, maxDelay)
            }
        }
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        var filtered: List<Packet<*>>

        synchronized(packetQueue) {
            filtered = packetQueue.entries.filter {
                it.value <= System.currentTimeMillis()
            }.map { it.key }
        }

        for (packet in filtered) {
            sendPacket(packet)
            packetQueue.remove(packet)
        }
    }

}