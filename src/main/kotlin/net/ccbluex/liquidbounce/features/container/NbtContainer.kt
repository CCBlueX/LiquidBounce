package net.ccbluex.liquidbounce.features.container

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.utils.client.asNbt
import net.ccbluex.liquidbounce.utils.client.asText
import net.ccbluex.liquidbounce.utils.client.mc
import net.minecraft.inventory.SimpleInventory
import net.minecraft.nbt.NbtCompound
import net.minecraft.nbt.NbtList
import net.minecraft.text.Text
import net.minecraft.util.Formatting

/**
 * Generates a list of [NbtCompound]s from a [SimpleInventory]
 *
 * These [NbtCompound]s can be used to recreate the inventory
 * using Minecraft Chests
 * by placing them together
 *
 * For example by typing this command:
 * give @p chest{display:{Name:"\"Hello!\""},BlockEntityTag:{Items:[{Slot:0,id:acacia_boat,Count:1}]}} 1
 *
 * This will give you a chest with the name "Hello!" and an acacia boat in the first slot
 * However, this will only work for the first 27 slots and not for the rest. This is why we split the
 *  inventory into multiple [NbtCompound]s
 *
 * There should also be [CommandChest] .chest <nbt> which will give you the chest with the given nbt
 *
 * @return A list of [NbtCompound]s representing the inventory
 */
fun SimpleInventory.inventoryAsCompound(title: Text): List<NbtCompound> {
    val compoundList = mutableListOf<NbtCompound>()

    val stacks = getHeldStacks()

    // If the inventory is empty, we don't need to do anything
    if (stacks.isEmpty()) {
        return compoundList
    }

    stacks.chunked(27).forEachIndexed { containerIndex, stacks ->
        val chestCompound = NbtCompound()
        val displayCompound = NbtCompound()

        displayCompound.putString("Name", Text.Serialization.toJsonString(title))

        val loreList = NbtList()
        loreList.add("Container #$containerIndex".asText().styled { it.withColor(Formatting.GOLD) }.asNbt())
        mc.currentServerEntry?.let {
            loreList.add("Server: ${it.address}".asText().styled { it.withColor(Formatting.GOLD) }.asNbt())
        }
        loreList.add("".asText().asNbt())

        loreList.add("Generated by ${LiquidBounce.CLIENT_NAME} ${LiquidBounce.clientVersion}".asText().styled {
            it.withColor(Formatting.DARK_AQUA)
        }.asNbt())
        loreList.add("Made with <3 by ${LiquidBounce.CLIENT_AUTHOR}".asText().styled {
            it.withColor(Formatting.YELLOW)
        }.asNbt())
        displayCompound.put("Lore", loreList)

        chestCompound.put("display", displayCompound)

        val blockEntityTag = NbtCompound()

        val itemList = NbtList()

        stacks.forEachIndexed { index, itemStack ->
            val itemCompound = NbtCompound()

            itemCompound.putByte("Slot", index.toByte())
            itemStack.writeNbt(itemCompound)
            itemList.add(itemCompound)
        }

        blockEntityTag.put("Items", itemList)
        chestCompound.put("BlockEntityTag", blockEntityTag)


        compoundList.add(chestCompound)
    }

    return compoundList
}

