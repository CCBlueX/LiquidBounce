/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2024 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.disablers

import net.ccbluex.liquidbounce.config.ToggleableConfigurable
import net.ccbluex.liquidbounce.event.events.PacketEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.ModuleDisabler
import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket
import net.minecraft.network.packet.s2c.common.CommonPingS2CPacket

/**
 * Verus Combat Disabler
 */
internal object DisablerVerusCombat : ToggleableConfigurable(ModuleDisabler, "VerusCombat", false) {

    /*  Works by just simply ignore transaction and not accepting them and send invalid one
        to bypass verus cancel transaction "patch" (not sending transaction for too long)
        This could work on other anti-cheat that don't have a proper transaction handling system
        But this will mostly be used on verus, disabled any combat check related to transaction.

        Don't use this below 1.17 because ViaFabric/ViaVersion will messed it up and get you banned!
        And I don't recommend using it with backtrack.... or you will be cooked.
     */
    @Suppress("unused")
    val packetHandler = handler<PacketEvent> { event ->
        if (player.age < 20) {
            return@handler
        }
        
        if (event.packet is CommonPingS2CPacket) {
            event.cancelEvent()
            network.sendPacket(CommonPongC2SPacket(-1))
        }
    }
}
