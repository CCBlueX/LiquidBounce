package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.events.PacketEvent
import net.ccbluex.liquidbounce.event.events.TransferOrigin
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.utils.client.isOldCombat
import net.minecraft.network.packet.Packet
import net.minecraft.network.packet.c2s.play.HandSwingC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket
import net.minecraft.util.Hand

/**
 * This fixes the order of the swing packet when placing, breaking or attacking blocks.
 * Use this if you have problems with NoSwing flags.
 *
 * On outdated anti-cheats such as NoCheatPlus this is required, otherwise you will get flagged for NoSwing.
 * On newer anti-cheats this is not required AND SHOULD NOT BE USED AS IT WILL CHANGE THE ORDER OF THE SWING PACKET.
 */
object ModuleSwingFix : Module("SwingFix", Category.EXPLOIT) {

    private var previousPacket: Packet<*>? = null
    private var fixedThis = false

    override fun enable() {
        previousPacket = null
        super.enable()
    }

    val packetHandler = handler<PacketEvent> { event ->
        if (event.origin != TransferOrigin.SEND) {
            return@handler
        }

        // If this is true, we are already using a fixed variant
        if (isOldCombat) {
            return@handler
        }

        val packet = event.packet

        when (packet) {

            is PlayerInteractBlockC2SPacket -> {
                if (previousPacket !is HandSwingC2SPacket) {
                    network.sendPacket(HandSwingC2SPacket(packet.hand))

                    // Since we sent a swing packet already, we need to prevent sending another next
                    fixedThis = true
                }
            }

            is PlayerInteractEntityC2SPacket -> {
                if (previousPacket !is HandSwingC2SPacket) {
                    network.sendPacket(HandSwingC2SPacket(Hand.MAIN_HAND))

                    // Since we sent a swing packet already, we need to prevent sending another next
                    fixedThis = true
                }
            }

            is HandSwingC2SPacket -> {
                if (fixedThis) {
                    event.cancelEvent()
                    fixedThis = false
                }
            }
        }

        previousPacket = packet
    }

}
