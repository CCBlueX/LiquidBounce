/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2024 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.events.NotificationEvent
import net.ccbluex.liquidbounce.event.repeatable
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.utils.client.Timer
import net.ccbluex.liquidbounce.utils.client.notification
import net.ccbluex.liquidbounce.utils.entity.downwards
import net.ccbluex.liquidbounce.utils.entity.upwards
import net.ccbluex.liquidbounce.utils.kotlin.Priority

/**
 * resetvl
 * allows you to reset anticheat violations
 * only works on older anticheats
 */

object ModuleResetVL : Module("ResetVL", Category.EXPLOIT) {
    private val times by int("Times", 10, 1..50)
    private val timer by float("Timer", 2f, 0.1f..10f)
    var count = 0

    val repeatable = repeatable {
        Timer.requestTimerSpeed(timer, priority = Priority.IMPORTANT_FOR_USER_SAFETY, provider = ModuleResetVL)

        if (player.isOnGround) {
            player.upwards(0.1f)
            waitTicks(1)
            player.downwards(0.1f)
            count++
        }

        if (count == times) {
            enabled = false
            notification("ResetVL", "Successfully reset violations", NotificationEvent.Severity.SUCCESS)
            count = 0
        }
    }
}
