/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2023 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */

package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.config.Choice
import net.ccbluex.liquidbounce.config.ChoiceConfigurable
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.PlayerJumpEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.event.repeatable
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.utils.client.Sprint.requestSprintState
import net.ccbluex.liquidbounce.utils.kotlin.Priority
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket

object ModuleAntiHunger : Module("AntiHunger", Category.EXPLOIT) {
    val spoofOnGround by boolean("SpoofOnGround", true)
    val blockJumping by boolean("BlockJumping", true)
    val spoofMoveSprinting = choices("Jump", SpoofSprinting, arrayOf(SpoofSprinting, BlockSprinting))

    object SpoofSprinting : Choice("SpoofSprinting") {
        override val parent: ChoiceConfigurable
            get() = spoofMoveSprinting
    }

    object BlockSprinting : Choice("BlockSprinting") {
        override val parent: ChoiceConfigurable
            get() = spoofMoveSprinting
    }

    val repeatable = repeatable {
        if (spoofMoveSprinting.activeChoice == BlockSprinting) {
            requestSprintState(true, Priority.IMPORTANT_FOR_USAGE)
        }
    }

    val packetHandler = handler<PacketEvent> {
        val packet = it.packet

        if (!spoofOnGround && packet is PlayerMoveC2SPacket) {
            packet.onGround = false
        }
        if (it.packet is ClientCommandC2SPacket && spoofMoveSprinting.activeChoice == SpoofSprinting) {
            if (it.packet.mode == ClientCommandC2SPacket.Mode.START_SPRINTING) {
                //it.packet.mode = ClientCommandC2SPacket.Mode.STOP_SPRINTING
            }
        }
    }

    val jumpHandler = handler<PlayerJumpEvent> {
        if (blockJumping) {
            it.cancelEvent()
        }
    }
}
