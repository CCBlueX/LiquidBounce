/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2024 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.Listenable
import net.ccbluex.liquidbounce.event.events.PacketEvent
import net.ccbluex.liquidbounce.event.events.PlayerTickEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.Category
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket

/**
 * AntiHunger Module
 *
 * Prevents hunger from decreasing, will flag anticheats.
 * Tested on PurityVanilla. Ran about 2000 blocks in the nether and hunger did not decrease.
 */

object ModuleAntiHunger : Module("AntiHunger", Category.EXPLOIT) {
    private var lastOnGround = false
    private var sendOnGroundTruePacket = false

    val packetHandler = handler<PacketEvent> { event ->
        if (event.packet is ClientCommandC2SPacket && player.isSprinting) {
            val mode = (event.packet as ClientCommandC2SPacket).mode

            if (mode == ClientCommandC2SPacket.Mode.START_SPRINTING) {
                event.cancelEvent()
            }
        }

        if (event.packet is PlayerMoveC2SPacket && player.isOnGround && player.fallDistance <= 0.0) {
            (event.packet as PlayerMoveC2SPacket).onGround = false
        }
    }

    val tickHandler = handler<PlayerTickEvent> { _ ->
        if (player.isTouchingWater) {
            return@handler
        }
        if (player.isOnGround && !lastOnGround && !sendOnGroundTruePacket) sendOnGroundTruePacket = true

        if (player.isOnGround && sendOnGroundTruePacket) {
            network.sendPacket(PlayerMoveC2SPacket.OnGroundOnly(true))
            sendOnGroundTruePacket = false
        }

        lastOnGround = player.isOnGround
    }
}
