/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2023 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */

package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.GameTickEvent
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.WorldChangeEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.utils.client.asText
import net.ccbluex.liquidbounce.utils.client.chat
import net.ccbluex.liquidbounce.utils.client.handlePacket
import net.minecraft.network.packet.Packet
import net.minecraft.network.packet.s2c.play.KeepAliveS2CPacket
import net.minecraft.network.packet.s2c.play.PlayPingS2CPacket
import net.minecraft.text.Text
import net.minecraft.util.Formatting
import java.util.concurrent.CopyOnWriteArrayList

/**
 * NoPitchLimit module
 *
 * Spoofs your ping to a specified value.
 */

object ModulePingSpoof : Module("PingSpoof", Category.EXPLOIT) {

    private val delay by int("Delay", 500, 0..25000)

    private val packetQueue = CopyOnWriteArrayList<DelayData>()

    override fun disable() {
        reset()
    }

    val packetHandler = handler<PacketEvent> { event ->
        val packet = event.packet

        if (player.isDead || event.isCancelled) {
            return@handler
        }

        if (packet is PlayPingS2CPacket || packet is KeepAliveS2CPacket) {
            event.cancelEvent()

            // Using nanotime helps us distinguish even better which packet got received first.
            packetQueue.add(DelayData(packet, System.currentTimeMillis(), System.nanoTime()))
        }
    }

    val tickHandler = handler<GameTickEvent> {
        if (mc.isIntegratedServerRunning) {
            chat(
                "${Text.translatable("liquidbounce.generic.error").string}: ".asText()
                    .styled { it.withColor(Formatting.RED).withBold(true) },
                message(
                    "cantEnableInSingleplayer",
                    "'PingSpoof'".asText().styled { it.withColor(Formatting.RED).withBold(true) }
                ).styled {
                    it.withColor(
                        Formatting.GREEN
                    )
                }
            )
            enabled = false
            return@handler
        }

        sendPacketsByOrder(false)
    }

    val worldChangeHandler = handler<WorldChangeEvent> {
        if (it.world == null) {
            packetQueue.clear()
        }
    }

    private fun sendPacketsByOrder(all: Boolean) {
        val filtered = packetQueue.filter {
            all || it.delay <= System.currentTimeMillis() - delay
        }.sortedBy { it.registration }

        for (data in filtered) {
            handlePacket(data.packet)

            packetQueue.remove(data)
        }
    }

    private fun reset() {
        sendPacketsByOrder(true)

        packetQueue.clear()
    }

    data class DelayData(val packet: Packet<*>, val delay: Long, val registration: Long)
}
