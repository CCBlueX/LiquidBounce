/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2016 - 2021 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */

package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.repeatable
import net.minecraft.network.Packet
import net.minecraft.network.packet.c2s.play.ClientStatusC2SPacket
import net.minecraft.network.packet.c2s.play.ConfirmScreenActionC2SPacket
import net.minecraft.network.packet.c2s.play.KeepAliveC2SPacket

object ModulePingSpoof : Module("PingSpoof", Category.EXPLOIT) {
    private val delay by int("Delay", 500, 0..5000)

    private val packetQueue = hashMapOf<Packet<*>, Long>()

    override fun disable() {
        packetQueue.clear()
    }

    val packetHandler = handler<PacketEvent> { event ->
        val packet = event.packet

        if (packet !is KeepAliveC2SPacket && packet !is ClientStatusC2SPacket && packet !is ConfirmScreenActionC2SPacket)
            return@handler

        if (player.isDead || player.health <= 0)
            return@handler

        if (packetQueue.remove(packet) != null)
            return@handler

        event.cancelEvent()

        synchronized(packetQueue) {
            packetQueue[packet] = System.currentTimeMillis() + delay
        }

    }

    val repeatable = repeatable {
        var filtered: List<Packet<*>>

        synchronized(packetQueue) {
            filtered = packetQueue.entries.filter {
                it.value >= System.currentTimeMillis()
            }.map { it.key }
        }

        for (packet in filtered) {
            network.sendPacket(packet)
        }
    }
}
