package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.repeatable
import net.minecraft.network.Packet
import net.minecraft.network.packet.c2s.play.ClientStatusC2SPacket
import net.minecraft.network.packet.c2s.play.KeepAliveC2SPacket

object ModulePingSpoof : Module("PingSpoof", Category.EXPLOIT) {

    private val ping by int("Ping", 500, 0..5000)

    private val packetqueue = hashMapOf<Packet<*>, Long>()

    override fun disable() {

        packetqueue.clear()
    }

    val packetHandler = handler<PacketEvent> { event ->

        if (event.packet is KeepAliveC2SPacket || event.packet is ClientStatusC2SPacket && !(player.isDead || player.health <= 0) && !packetqueue.containsKey(event.packet)) {
            event.cancelEvent()

            synchronized(packetqueue) {
                packetqueue[event.packet] = System.currentTimeMillis() + ping
            }
        }
    }

    val repeatable = repeatable {
        synchronized(packetqueue) {
            packetqueue.filter {
                it.value >= System.currentTimeMillis()
            }.forEach { (packet, time) ->
                network.sendPacket(packet)
                packetqueue.remove(packet, time)
            }
        }
    }
}
