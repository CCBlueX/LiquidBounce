/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2024 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.events.GameTickEvent
import net.ccbluex.liquidbounce.event.events.PacketEvent
import net.ccbluex.liquidbounce.event.events.WorldChangeEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.fakelag.DelayData
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.utils.client.chat
import net.ccbluex.liquidbounce.utils.client.handlePacket
import net.ccbluex.liquidbounce.utils.client.markAsError
import net.minecraft.network.packet.s2c.common.CommonPingS2CPacket
import net.minecraft.network.packet.s2c.common.KeepAliveS2CPacket

/**
 * PingSpoof module
 *
 * Spoofs your ping to a specified value.
 */

object ModulePingSpoof : Module("PingSpoof", Category.EXPLOIT) {

    private val delay by int("Delay", 500, 0..25000, "ms")

    private val packetQueue = LinkedHashSet<DelayData>()

    override fun disable() {
        reset()
    }

    val packetHandler = handler<PacketEvent> { event ->
        val packet = event.packet

        if (player.isDead || event.isCancelled) {
            return@handler
        }

        if (packet is KeepAliveS2CPacket || packet is CommonPingS2CPacket) {
            event.cancelEvent()

            synchronized(packetQueue) {
                packetQueue.add(DelayData(packet, System.currentTimeMillis()))
            }
        }
    }

    val tickHandler = handler<GameTickEvent> {
        if (mc.isIntegratedServerRunning) {
            chat(markAsError(message("cantEnableInSingleplayer")))
            enabled = false
            return@handler
        }

        sendPacketsByOrder(false)
    }

    @Suppress("unused")
    val worldChangeHandler = handler<WorldChangeEvent> {
        if (it.world == null) {
            synchronized(packetQueue) {
                packetQueue.clear()
            }
        }
    }

    private fun sendPacketsByOrder(all: Boolean) {
        synchronized(packetQueue) {
            packetQueue.removeIf {
                if (all || it.delay <= System.currentTimeMillis() - delay) {
                    handlePacket(it.packet)
                    return@removeIf true
                }

                false
            }
        }
    }

    private fun reset() {
        sendPacketsByOrder(true)
    }


}
