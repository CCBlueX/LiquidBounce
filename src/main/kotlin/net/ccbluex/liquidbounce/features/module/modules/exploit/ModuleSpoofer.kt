/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2024 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.config.Choice
import net.ccbluex.liquidbounce.config.ChoiceConfigurable
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module

// TODO: add this to configure page, whenever it is finished
@Suppress("SpellCheckingInspection")
object ModuleSpoofer : Module("ClientSpoofer", Category.EXPLOIT) {

    private const val CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

    val mode = choices(
        "Mode",
        Lunar,
        arrayOf(Vanilla, Lunar, Cheatbreaker, Custom)
    )

    fun clientBrand(brand: String) = if (enabled) mode.activeChoice.getBrand() else brand

    private object Vanilla : SpoofMode("Vanilla") {
        override fun getBrand(): String = "vanilla"
    }

    private object Lunar : SpoofMode("Lunar") {
        override fun getBrand(): String = "lunarclient:v2.16.8-2433"
    }

    private object Cheatbreaker : SpoofMode("Cheatbreaker") {
        override fun getBrand(): String = "CB"
    }

    private object Custom : SpoofMode("Custom") {

        val brandName by text("BrandName", "")

        override fun getBrand(): String = brandName

    }

    abstract class SpoofMode(name: String) : Choice(name) {

        override val parent: ChoiceConfigurable<*>
            get() = mode

        abstract fun getBrand(): String

    }

    fun random(length: Int, chars: CharArray = CHARS.toCharArray()): String {
        val stringBuilder = StringBuilder()
        repeat(length) {
            stringBuilder.append(chars.random())
        }
        return stringBuilder.toString()
    }

}
