/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2024 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.config.NamedChoice
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module

// TODO: add this to configure page, whenever it is finished
object ModuleSpoofer : Module("ClientSpoofer", Category.EXPLOIT) {

    val mode = enumChoice("Mode", SpoofMode.LUNAR)

    fun clientBrand(brand: String) = if (enabled) mode.inner.clientBrand() else brand

    enum class SpoofMode(override val choiceName: String, val clientBrand: () -> String) : NamedChoice {
        VANILLA("Vanilla", { "vanilla" }),
        LUNAR("Lunar", { "lunarclient:v2.12.3-2351" }),
        CHEATBREAKER("Cheatbreaker", { "CB"})
    }

    private const val CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

    fun random(length: Int, chars: CharArray = CHARS.toCharArray()): String {
        val stringBuilder = StringBuilder()
        repeat(length) {
            stringBuilder.append(chars.random())
        }
        return stringBuilder.toString()
    }
}
