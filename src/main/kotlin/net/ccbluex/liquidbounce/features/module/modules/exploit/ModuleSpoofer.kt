/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2023 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.config.NamedChoice
import net.ccbluex.liquidbounce.event.events.PacketEvent
import net.ccbluex.liquidbounce.event.events.TransferOrigin
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import kotlin.random.Random

// TODO: add this to configure page, whenever it is finished
object ModuleSpoofer : Module("ClientSpoofer", Category.EXPLOIT) {

    val mode = enumChoice("Mode", SpoofMode.LUNAR, SpoofMode.values())

    val spoofHandler = handler<PacketEvent>(priority = 1) { ev ->
        if (ev.origin == TransferOrigin.SEND) {
            // todo: oh no, what is this?
/*            if (ev.packet is CustomPayloadC2SPacket && ev.packet.channel.toString().contains("brand")) {
                ev.packet.data = PacketByteBuf(Unpooled.buffer()).writeString(
                    when (mode.value) {
                        SpoofMode.VANILLA -> "vanilla"

                        SpoofMode.LUNAR -> "lunarclient:${
                            random(
                                7, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".toCharArray()
                            )
                        }"

                        SpoofMode.CHEATBREAKER -> "CB"
                    }
                )
            }*/
        }
    }

    enum class SpoofMode(override val choiceName: String) : NamedChoice {
        VANILLA("vanilla"), LUNAR("lunar"), CHEATBREAKER("cb")
    }

    fun random(length: Int, chars: CharArray): String {
        val stringBuilder = StringBuilder()

        repeat(length) {
            stringBuilder.append(chars[Random.nextInt(chars.size)])
        }

        return stringBuilder.toString()
    }
}
