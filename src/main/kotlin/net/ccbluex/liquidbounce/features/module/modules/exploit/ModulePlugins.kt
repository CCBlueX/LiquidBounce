/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2024 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.events.ChatReceiveEvent
import net.ccbluex.liquidbounce.event.events.PacketEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.event.repeatable
import net.ccbluex.liquidbounce.event.sequenceHandler
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.utils.client.chat
import net.ccbluex.liquidbounce.utils.client.markAsError
import net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket
import net.minecraft.network.packet.s2c.play.CommandSuggestionsS2CPacket

/**
 * Plugins module
 *
 * Allows you to see a server's plugins.
 */
object ModulePlugins : Module("Plugins", Category.EXPLOIT) {

    private val trySlash by boolean("TrySlash", true)
    private val tryColonSlash by boolean("TryColonSlash", true)
    private val tryTabComplete by boolean("TryTabComplete", true)

    @Suppress("SpellCheckingInspection")
    private val knownAntiCheats = arrayOf(
        "nocheatplus",
        "grimac",
        "aac",
        "intave",
        "horizon",
        "vulcan",
        "Vulcan",
        "spartan",
        "kauri",
        "anticheatreloaded",
        "matrix",
        "themis",
        "negativity"
    )

    var step = 0

    override fun enable() {
        step = 0
    }

    val repeatable = repeatable {
        when (step) {
            // Works only on servers that did not block the plugins command.
            0 -> if (trySlash) network.sendCommand("plugins") else step++
            // Use bukkit:plugins to get plugins, this might work on some servers if they blocked the plugins command.
            1 -> if (tryColonSlash) network.sendCommand("bukkit:plugins") else step++
            // Exploits tab completion to get plugins - this will not show all of them, but it will show some.
            2 -> if (tryTabComplete)
                network.sendPacket(RequestCommandCompletionsC2SPacket(0, "/")) else step++

            else -> { // If none of the methods worked out, disable the module.
                chat(message("timeOut"))
                enabled = false
            }
        }
        step++

        waitTicks(20)
    }

    @Suppress("unused")
    val chatHandler = sequenceHandler<ChatReceiveEvent> { event ->
        val message = event.message

        // Only handle game messages. It is unlikely that any server will use a player for the chat game.
        if (event.type != ChatReceiveEvent.ChatType.GAME_MESSAGE) {
            return@sequenceHandler
        }

        // Wait for server response
        if (step == 0 || step == 1) {
            // Server has already responded with a list of plugins.
            if (message.contains("Plugins (")) {
                // Seems we already got the plugins.
                enabled = false

                // Sadly we cannot use the takeInput here, because we cannot cancel the message with this event.
                // Might change this in the future.
            }
        }
    }

    val packetHandler = handler<PacketEvent> { event ->
        val packet = event.packet

        if (packet is CommandSuggestionsS2CPacket) {
            val plugins = packet.suggestions.list.mapNotNull { cmd ->
                val command = cmd.text.split(":")

                if (command.size > 1) {
                    command[0].replace("/", "")
                } else {
                    null
                }
            }.distinct().sorted().toSet()
            takePluginInput(plugins)
        }
    }

    private fun takePluginInput(plugins: Set<String>) {
        if (plugins.isNotEmpty()) {
            val pluginsString = plugins.joinToString {
                if (knownAntiCheats.contains(it)) {
                    "§a$it"
                } else {
                    "§c$it"
                }
            }

            chat("§aPlugins §7(§8${plugins.size}§7): $pluginsString")
        } else {
            chat(markAsError(message("noPluginsFound")))
        }
        enabled = false
    }

}
