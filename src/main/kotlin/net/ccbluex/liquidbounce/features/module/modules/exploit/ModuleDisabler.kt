package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.repeatable
import net.ccbluex.liquidbounce.utils.extensions.timer
import net.minecraft.network.packet.c2s.play.ConfirmScreenActionC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerInputC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket
import net.minecraft.network.packet.s2c.play.KeepAliveS2CPacket
import org.apache.commons.lang3.RandomUtils
import java.util.*
import java.util.concurrent.ConcurrentLinkedQueue

object ModuleDisabler : Module("Disabler", Category.EXPLOIT) {
    private val mode by chooseList("Mode", "MineplexCombat", arrayOf("Hypixel", "RedeskyOld", "MineplexCombat", "AAC1.9.10"))

    private var startYaw = 0f
    private var startPitch = 0f

    override fun enable() {
        if (mode.equals("RedeskyOld", true)) {
            startYaw = player.yaw
            startPitch = player.pitch
        }
    }
    
    override fun disable() {
        
        mc.timer.timerSpeed = 1f
    }

    private var Ids: Queue<Short> = ConcurrentLinkedQueue()

    val repeatable = repeatable {
        if (mc.world == null) Ids.clear()
        
        if(mode.equals("RedeskyOld", true)) mc.timer.timerSpeed = 0.12f
    }

    val packetHandler = handler<PacketEvent> { event ->
        when (mode) {
            "Hypixel" -> if (event.packet is ConfirmScreenActionC2SPacket) {
                val packetConfirmTransaction: ConfirmScreenActionC2SPacket = event.packet
                if (packetConfirmTransaction.actionId < 0 && packetConfirmTransaction.syncId == 0 && mc.player != null && mc.world != null) {
                    if (!Ids.isEmpty()) {
                        network.sendPacket(ConfirmScreenActionC2SPacket(0, Ids.poll(), true))
                    }
                    Ids.offer(packetConfirmTransaction.actionId)
                    event.cancelEvent()
                }
            } else if (event.packet is KeepAliveS2CPacket) {
                event.cancelEvent()
            }
            "MineplexCombat" -> if (event.packet is KeepAliveC2SPacket) {
                event.packet.id -= RandomUtils.nextInt(1000, 2147483647)
            }
        }
        if (event.packet is PlayerMoveC2SPacket) {
            val packetPlayer: PlayerMoveC2SPacket = event.packet
            when (mode) {
                "AAC1.9.10" -> {
                    network.sendPacket(PlayerInputC2SPacket())
                    packetPlayer.y += 7.0E-9
                }
                "RedeskyOld" -> {
                    val randomFloat = RandomUtils.nextFloat(10.1f, 50f)
                    val x = randomFloat
                    val y = randomFloat
                    val z = randomFloat
                    if (player.ticksSinceLastPositionPacketSent % 4 == 0) {
                        packetPlayer.x += if (RandomUtils.nextBoolean()) x else -x
                        packetPlayer.y += if (RandomUtils.nextBoolean()) y else -y
                        packetPlayer.z += if (RandomUtils.nextBoolean()) z else -z
                    }
                    val lastReportedYaw = player.lastYaw
                    val lastReportedPitch = player.lastPitch
                    if (packetPlayer.changeLook) {
                        packetPlayer.yaw =
                            if (player.ticksSinceLastPositionPacketSent % 2 == 0) startYaw else lastReportedYaw
                        packetPlayer.pitch =
                            if (player.ticksSinceLastPositionPacketSent % 2 == 0) startPitch else lastReportedPitch
                    }
                }
            }
        }
    }
}