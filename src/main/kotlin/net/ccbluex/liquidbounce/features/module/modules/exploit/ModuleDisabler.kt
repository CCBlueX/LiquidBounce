package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Choice
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.repeatable
import net.ccbluex.liquidbounce.utils.extensions.timer
import net.minecraft.network.packet.c2s.play.ConfirmScreenActionC2SPacket
import net.minecraft.network.packet.c2s.play.KeepAliveC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerInputC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket
import net.minecraft.network.packet.s2c.play.KeepAliveS2CPacket
import org.apache.commons.lang3.RandomUtils
import java.util.*
import java.util.concurrent.ConcurrentLinkedQueue

object ModuleDisabler : Module("Disabler", Category.EXPLOIT) {

    private val modes = choices("Mode", "MineplexCombat") {
        Hypixel
        RedeskyOld
        MineplexCombat
        AACOld
    }

    private var startYaw = 0f
    private var startPitch = 0f

    override fun disable() {

        mc.timer.timerSpeed = 1f
    }

    private var Ids: Queue<Short> = ConcurrentLinkedQueue()

    val repeatable = repeatable {
        if (mc.world == null) Ids.clear()

    }

    private object Hypixel : Choice("Hypixel", modes) {
        val packetHandler = handler<PacketEvent> { event ->
            if (event.packet is ConfirmScreenActionC2SPacket) {
                val packetConfirmTransaction: ConfirmScreenActionC2SPacket = event.packet
                if (packetConfirmTransaction.actionId < 0 && packetConfirmTransaction.syncId == 0 && mc.player != null && mc.world != null) {
                    if (!Ids.isEmpty())
                        network.sendPacket(ConfirmScreenActionC2SPacket(0, Ids.poll(), true))

                    Ids.offer(packetConfirmTransaction.actionId)
                    event.cancelEvent()
                }
            } else if (event.packet is KeepAliveS2CPacket) {
                event.cancelEvent()
            }
        }
    }

    private object RedeskyOld : Choice("RedeskyOld", modes) {

        override fun enable() {
            startYaw = player.yaw
            startPitch = player.pitch
        }

        val packetHandler = handler<PacketEvent> { event ->
            if (event.packet is PlayerMoveC2SPacket) {
                val packetPlayer: PlayerMoveC2SPacket = event.packet
                val randomFloat = RandomUtils.nextFloat(10.1f, 50f)
                if (player.ticksSinceLastPositionPacketSent % 4 == 0) {
                    packetPlayer.x += if (RandomUtils.nextBoolean()) randomFloat else -randomFloat
                    packetPlayer.y += if (RandomUtils.nextBoolean()) randomFloat else -randomFloat
                    packetPlayer.z += if (RandomUtils.nextBoolean()) randomFloat else -randomFloat
                }
                val lastReportedYaw = player.lastYaw
                val lastReportedPitch = player.lastPitch
                if (packetPlayer.changeLook) {
                    packetPlayer.yaw =
                        if (player.ticksSinceLastPositionPacketSent % 2 == 0) startYaw else lastReportedYaw
                    packetPlayer.pitch =
                        if (player.ticksSinceLastPositionPacketSent % 2 == 0) startPitch else lastReportedPitch
                }
            }
        }
        val repeatable = repeatable {
            mc.timer.timerSpeed = 0.12f
        }
    }

    private object MineplexCombat : Choice("MineplexCombat", modes) {
        val packetHandler = handler<PacketEvent> { event ->
            if (event.packet is KeepAliveC2SPacket) {
                event.packet.id -= RandomUtils.nextInt(1000, 2147483647)
            }
        }
    }

    private object AACOld : Choice("AAC1.9.10", modes) {
        val packetHandler = handler<PacketEvent> { event ->
            if (event.packet is PlayerMoveC2SPacket) {
                val packetPlayer = PlayerMoveC2SPacket()
                network.sendPacket(PlayerInputC2SPacket())
                packetPlayer.y += 7.0E-9
            }
        }
    }
}
