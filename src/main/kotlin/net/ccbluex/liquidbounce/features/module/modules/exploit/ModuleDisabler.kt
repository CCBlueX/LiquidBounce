/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2024 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.config.Choice
import net.ccbluex.liquidbounce.config.ChoiceConfigurable
import net.ccbluex.liquidbounce.event.events.PacketEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.event.repeatable
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.utils.client.chat
import net.ccbluex.liquidbounce.utils.client.markAsError
import net.ccbluex.liquidbounce.utils.client.regular
import net.ccbluex.liquidbounce.utils.item.getEnchantment
import net.minecraft.enchantment.Enchantments
import net.minecraft.item.Items
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerInputC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerInteractItemC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket
import net.minecraft.util.Hand
import net.minecraft.util.math.BlockPos
import net.minecraft.util.math.Direction
import kotlin.math.roundToInt

/**
 * A disabler module
 *
 * Disables either a specific anti-cheat or server.
 */
object ModuleDisabler : Module("Disabler", Category.EXPLOIT) {

    private val modes = choices(
        "Mode", LiveOverflow, arrayOf(
            LiveOverflow,
            AdvancedAntiCheat1910,
            VulcanRiptide,
        )
    )

    override fun enable() {
        chat(regular(message("info")))
        super.enable()
    }

    /**
     * Exploits the Riptide except of Vulcan in order to disable any movement checks
     *
     * This seems to be patched in newer versions of Vulcan
     * This disabler was added in 02/07/23, which indicates it was probably made for Vulcan 2.7.5
     */
    private object VulcanRiptide : Choice("VulcanRiptide") {

        override val parent: ChoiceConfigurable<Choice>
            get() = modes

        override fun enable() {
            if (!checkItem()) {
                chat(markAsError(message("vulcanRiptideMessage")))
                enabled = false
            }
        }

        val repeatable = repeatable {
            if (checkItem()) {
                waitTicks(20)
                interaction.sendSequencedPacket(world) { sequence ->
                    PlayerInteractItemC2SPacket(Hand.OFF_HAND, sequence)
                }
                network.sendPacket(
                    PlayerActionC2SPacket(
                        PlayerActionC2SPacket.Action.RELEASE_USE_ITEM, BlockPos(0, 0, 0), Direction.DOWN
                    )
                )
            }
            return@repeatable
        }

        fun checkItem(): Boolean {
            val offhand = player.inventory.offHand[0]
            return (offhand.item == Items.TRIDENT && offhand.hasEnchantments()
                && offhand.getEnchantment(Enchantments.RIPTIDE) != 0)
        }
    }

    /**
     * AAC 1.9.10 disabler
     */
    private object AdvancedAntiCheat1910 : Choice("AAC1.9.10") {

        override val parent: ChoiceConfigurable<Choice>
            get() = modes

        val packetHandler = handler<PacketEvent> { event ->
            if (event.packet is PlayerMoveC2SPacket) {
                network.sendPacket(
                    PlayerInputC2SPacket(
                        player.sidewaysSpeed, player.forwardSpeed, true, player.input.sneaking
                    )
                )
                event.packet.y += 7.0E-9
            }
        }
    }

    /**
     * LiveOverflow disabler
     *
     * This disabler is made for LiveOverflow's server
     */
    private object LiveOverflow : Choice("LiveOverflow") {

        override val parent: ChoiceConfigurable<Choice>
            get() = modes

        val packetHandler = handler<PacketEvent> { event ->
            when (val packet = event.packet) {
                is PlayerMoveC2SPacket -> {
                    packet.x = (packet.x * 100).roundToInt() / 100.0
                    packet.z = (packet.z * 100).roundToInt() / 100.0
                }
            }
        }
    }
}
